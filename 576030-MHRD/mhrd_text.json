{"name":"Review_Text","index":[2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2467,2469,2470,2471,2473,2474,2477,2479,2482,2483,2486,2487,2488,2490,2491,2496,2497,2498,2499,2500,2503,2504,2509,2511,2512,2514,2515,2518,2519,2520,2523,2526,2527,2528,2529,2530,2531,2532,2533,2537,2538,2541,2542,2544,2545,2546,2550,2551,2556,2558,2565,2568,2569,2582,2583,2584,2585,2586,2590,2592,2596,2598,2599,2600,2601,2606,2609,2610,2616,2622,2623,2626,2629,2630,2633,2636,2639,2640,2641,2643,2648,2655,2658,2659,2660,2661,2662,2663,2666,2667,2668,2669,2674,2676,2677,2678,2680,2682,2684,2686,2687,2693,2694,2695,2698,2704],"data":[["Nice little game where you are guided through the process of creating a full CPU. Great if you like games like TIS-100 and Shenzhen I\/O. Be warned though - depending on your experience, this game might either be really short or really long.","Nice little game where you are guided through the process of creating a full CPU. Great if you like games like TIS-100 and Shenzhen I\/O. Be warned though - depending on your experience, this game might either be really short or really long.","If you liked SpaceChem, InfiniFactory, TIS-100 and Shenzhen I\/O, then MHR&D is a game for you. BUY IT NOW!You start with a single NAND chip and from there, go on to design other logic gates (NOT, AND, OR) before moving on to more advanced chips like ALUs and memory registers, culminating in the design of your very own CPU as a final challenge.Knowledge of boolean logic is all that you need when walking in and maybe some good visualization skills to think up schematics in your head or on paper. I'm a software reverse-engineer but I have never studied hardware engineering before and still completed the game while managing to learn a few things at the same time.The game can be off-puting at first due to the minimal amount of information given in the tutorial and the documentation but after thinkering with everything for a bit, all the pieces fall into place. The documentation is actually over-specific in some areas, causing information overload at first glance. i.e.: The documentation defines what is a \"letter\" and a \"digit\".The major feature severely lacking is a debugger to help on big projects. It would be nice to be able to put a probe somewhere that would give a debug reading at that location.It would also have been nice to have the option to turn off Ted the intern, who completes some of your projects instantly behind the scene. The possibility of making custom chips that are not an assigned task would have been a nice touch too.Short game, can be finished completely in a few hours, 2nd playthrough to get the new achievements took me ~2 hours. It would have been nice to do more completed tasks than the final CPU.Overall, great game for people who already know software engineering but might have never exposed to hardware engineering before.","Nice game about creating your own CPU from scratch (NANDs and simple flip-flops). The best part of it is creating something and then later using it like a 'black-box'.","After playing TIS-100, I jumped into the Steam Store and searched for games with the Programming tag, and alas, it is not a well-populated corner of the market.  However, this game had come out a few days ago, and for only 10 bucks at the time, it seemed well worth whatever I would probably get out of it.  As a novice programmer, I am always eager to get my grubby paws on experiential games. Having finished the game (as far as I can tell, until DLC or later updates), it was a great way to get a rudimentary understanding of how basic computational chips work. It was extremely satisfying to take a single logic gate and a simple delay device and end up building all requisite components for a CPU and for RAM, the end goal of this game.It was, in fact, very similar to Zachtronics' games TIS-100 and Shenzhen I\/O, but with differences (for better or for worse...) throughout.  For example, though Zachtronics better implemented the task and email system than MHRD did with Shenzhen I\/O, MHRD keeps you interested with use of an \"intern\", Ted, who will do the tedious simple expansionary work for you.All in all, it's a minimalist, short-but-sweet game that is difficult, but rewarding for those with an aptitude for puzzle games.","fun game, love the idea of it. it's relatively straight-forward if you have a background in digital electronics, otherwise though it doesn't hold your hand much :)","If you liked TIS-100 or Shenzen I\/O you'll like MHRD too. I always was scared of logic gates, and it looked like black magic to me, but the progression of the game makes some sense of it.","If you liked TIS-100 or Shenzen I\/O you'll like MHRD too. I always was scared of logic gates, and it looked like black magic to me, but the progression of the game makes some sense of it.","fun game, love the idea of it. it's relatively straight-forward if you have a background in digital electronics, otherwise though it doesn't hold your hand much :)","If you liked SpaceChem, InfiniFactory, TIS-100 and Shenzhen I\/O, then MHR&D is a game for you. BUY IT NOW!You start with a single NAND chip and from there, go on to design other logic gates (NOT, AND, OR) before moving on to more advanced chips like ALUs and memory registers, culminating in the design of your very own CPU as a final challenge.Knowledge of boolean logic is all that you need when walking in and maybe some good visualization skills to think up schematics in your head or on paper. I'm a software reverse-engineer but I have never studied hardware engineering before and still completed the game while managing to learn a few things at the same time.The game can be off-puting at first due to the minimal amount of information given in the tutorial and the documentation but after thinkering with everything for a bit, all the pieces fall into place. The documentation is actually over-specific in some areas, causing information overload at first glance. i.e.: The documentation defines what is a \"letter\" and a \"digit\".The major feature severely lacking is a debugger to help on big projects. It would be nice to be able to put a probe somewhere that would give a debug reading at that location.It would also have been nice to have the option to turn off Ted the intern, who completes some of your projects instantly behind the scene. The possibility of making custom chips that are not an assigned task would have been a nice touch too.Short game, can be finished completely in a few hours, 2nd playthrough to get the new achievements took me ~2 hours. It would have been nice to do more completed tasks than the final CPU.Overall, great game for people who already know software engineering but might have never exposed to hardware engineering before.","Nice game about creating your own CPU from scratch (NANDs and simple flip-flops). The best part of it is creating something and then later using it like a 'black-box'.","After playing TIS-100, I jumped into the Steam Store and searched for games with the Programming tag, and alas, it is not a well-populated corner of the market.  However, this game had come out a few days ago, and for only 10 bucks at the time, it seemed well worth whatever I would probably get out of it.  As a novice programmer, I am always eager to get my grubby paws on experiential games. Having finished the game (as far as I can tell, until DLC or later updates), it was a great way to get a rudimentary understanding of how basic computational chips work. It was extremely satisfying to take a single logic gate and a simple delay device and end up building all requisite components for a CPU and for RAM, the end goal of this game.It was, in fact, very similar to Zachtronics' games TIS-100 and Shenzhen I\/O, but with differences (for better or for worse...) throughout.  For example, though Zachtronics better implemented the task and email system than MHRD did with Shenzhen I\/O, MHRD keeps you interested with use of an \"intern\", Ted, who will do the tedious simple expansionary work for you.All in all, it's a minimalist, short-but-sweet game that is difficult, but rewarding for those with an aptitude for puzzle games.","This is by no means a game, beyond the sparse emails which suggest that your unseen lackey will construct labour-intensive, but otherwise mindless wider versions of components you have already invented.Fair warning: this \"game\" is about inventing CPU components in a rather accurate fashion, and has very little in the way of hand-holding.If you want to fast-forward through a starter class on logic gates, memory and processors, without worrying about electrical engineering or clunky software (okay, the game is designed to be clunky, specifically), and you want to do all of that with no hand-holding or hints, then this is a fantastic way to spend a little money and a little time.My one wish, I suppose, is that the authors would rank your gates compared to other possible solutions, and grade you based on different criteria. My first play through, my solutions required at most just staring blankly for 10 minutes before typing in a naive solution, which might not work for gaming systems or mobile hardware, but certainly helps keep things simple. It'd be nice to see the system pop up and say: \"We think that you could get ~50% better performance out of this gate, if you refactored it\".If this souds abysmally dry to you, don't worry. It's exactly the type of game some people are looking for, right now. And I'm glad I didn't have to look far.","This is by no means a game, beyond the sparse emails which suggest that your unseen lackey will construct labour-intensive, but otherwise mindless wider versions of components you have already invented.Fair warning: this \"game\" is about inventing CPU components in a rather accurate fashion, and has very little in the way of hand-holding.If you want to fast-forward through a starter class on logic gates, memory and processors, without worrying about electrical engineering or clunky software (okay, the game is designed to be clunky, specifically), and you want to do all of that with no hand-holding or hints, then this is a fantastic way to spend a little money and a little time.My one wish, I suppose, is that the authors would rank your gates compared to other possible solutions, and grade you based on different criteria. My first play through, my solutions required at most just staring blankly for 10 minutes before typing in a naive solution, which might not work for gaming systems or mobile hardware, but certainly helps keep things simple. It'd be nice to see the system pop up and say: \"We think that you could get ~50% better performance out of this gate, if you refactored it\".If this souds abysmally dry to you, don't worry. It's exactly the type of game some people are looking for, right now. And I'm glad I didn't have to look far.","I'm a programmer and I thought this game would be a lot of fun. However this game uses a semi complex syntax system and the documentation in-game and online are just terrible. I just barely got past the first level, and I used trial and error. The second level was damn near impossible to figure out going on their documentation. I'd highly recommend TIS-100 or Shenzhen IO if this game interests you. They have a lot more documentation and while both games get complex, they are still fun to play and figure out. Something this game lacks.2 years later update: Much better game now, I don't know if it's just it needed time, or if their were updates, but it's a lot of fun to play and figure out.","This is a very well written programming game centered around building logic gates. It all starts with NAND and the rest is up to you, guided by a progressive 'task' system (new tasks appear as you solve the given ones). The completed gates can be used to build more complex ones, and a helpful intern 'Ted' automatically solves gates that are very similar to some you have done yourself, a nice timesaver since some tasks could be a little tedious. Unlike most logic gate simulators this one is focused on the programming side, and the visual representation of your diagrams is left up to you (ah, old pen and paper!). The language is simple to learn and very clearly presented in the in-game manual, with examples and all (essentially, a 'program' consists of the inputs\/outputs section, the 'parts' section where you list the gates you need, and the 'wires' section where all the connections are specified. There is support for busses, too, with intuitive notation such as input[8] for an 8-bit input bus. Also, editor functions such as ctrl-c and ctrl-v (for cut and paste) can speed up things considerably.This being said, this game could be a little tough if you have no programming experience or if you have never seen a logic gate in your life. Perhaps if that were the case a preliminary quick trip to WIkipedia could be helpful (look up 'logic gate' and check out the basic AND, OR, etc.). Of course trying costs nothing thanks to Steam's refund policy, so why not go for it if you are curious?","Highly recommended for everyone interested in digital electronics. You start with the most basic logic gate of them all, and build your way up towards more complex designs. Awesome.","This is a very well written programming game centered around building logic gates. It all starts with NAND and the rest is up to you, guided by a progressive 'task' system (new tasks appear as you solve the given ones). The completed gates can be used to build more complex ones, and a helpful intern 'Ted' automatically solves gates that are very similar to some you have done yourself, a nice timesaver since some tasks could be a little tedious. Unlike most logic gate simulators this one is focused on the programming side, and the visual representation of your diagrams is left up to you (ah, old pen and paper!). The language is simple to learn and very clearly presented in the in-game manual, with examples and all (essentially, a 'program' consists of the inputs\/outputs section, the 'parts' section where you list the gates you need, and the 'wires' section where all the connections are specified. There is support for busses, too, with intuitive notation such as input[8] for an 8-bit input bus. Also, editor functions such as ctrl-c and ctrl-v (for cut and paste) can speed up things considerably.This being said, this game could be a little tough if you have no programming experience or if you have never seen a logic gate in your life. Perhaps if that were the case a preliminary quick trip to WIkipedia could be helpful (look up 'logic gate' and check out the basic AND, OR, etc.). Of course trying costs nothing thanks to Steam's refund policy, so why not go for it if you are curious?","I'm a programmer and I thought this game would be a lot of fun. However this game uses a semi complex syntax system and the documentation in-game and online are just terrible. I just barely got past the first level, and I used trial and error. The second level was damn near impossible to figure out going on their documentation. I'd highly recommend TIS-100 or Shenzhen IO if this game interests you. They have a lot more documentation and while both games get complex, they are still fun to play and figure out. Something this game lacks.2 years later update: Much better game now, I don't know if it's just it needed time, or if their were updates, but it's a lot of fun to play and figure out.","Highly recommended for everyone interested in digital electronics. You start with the most basic logic gate of them all, and build your way up towards more complex designs. Awesome."],["This is a good game!11 hours in and I'm having a great time.It's incredible how it takes you on a journey from the humble NAND logic gate and you bootstrap your way up all the way to building a CPU.You start with a NAND gate and it teaches you to create a NOT gate, then AND, OR, XOR. You use these building blocks, made out of building blocks you previously wrote yourself, to create ever-more complex components; MUX (basically an if statement in hardware), registers (basic memory), RAM, all the way up to a CPU.It's surprisingly accurate to real life too, so I learned a ton playing this game. You spend a lot of time just writing in a notebook, but the combination of just the right structure of the problems, and not holding your hand too much, is really very rewarding and addictive.If you studied computer science, or are interested in programming or hardware, and always wondered how to break down what's happening under the hood to the most basic possible level, this game is for you.Highly recommended.","A well put together and enlightening game, I really enjoy it!","This game will give you an insight into how a CPU can be built up from the most basic of components, but it is not very much like a game. While I enjoyed it, in its current state it feels incomplete and has little replay value. As other reviewers have said, there needs to be a mechanism for rating your solution to a problem against other solutions, such as through gate count or power consumption, and I think there needs to be something beyond making a CPU, maybe a graphics co-processor or something, or even a sandbox-type mode where you can create and test your own circuit designs. There could also be a way to have multiple designs for the same component.","This game will give you an insight into how a CPU can be built up from the most basic of components, but it is not very much like a game. While I enjoyed it, in its current state it feels incomplete and has little replay value. As other reviewers have said, there needs to be a mechanism for rating your solution to a problem against other solutions, such as through gate count or power consumption, and I think there needs to be something beyond making a CPU, maybe a graphics co-processor or something, or even a sandbox-type mode where you can create and test your own circuit designs. There could also be a way to have multiple designs for the same component."],["Enjoying this game so far. Has helped demystify how one might get from a humble NAND gate to a fully functional CPU.I recommend this game to anyone who enjoys puzzle games and wants to also gain a basic understanding of how computers are constructed at a very low level. I'm a software developer myself and am enjoying solving problems from a new, low-level perspective. I'll probably end up seeking out more information on hardware design and electronics because of this game.","Amazing game. As soon as I saw it, I new I'd love it. It's a great introduction to the general conceptws of HDL. I I stayed up past 2AM to play it, then finished what's there right now. I wish there was more content, but that will come. For now, 10\/10.","it's like work but productive","If you're into electronics , FPGA or things of the sort it's quite fun.  Easier than I originally expected but I'm enjoying it","I'm studying Computer Engineering at University right now. Took me 90 minutes to realize that this game was basically the same thing as my homework for 'Logic Design'... which is dope.I'm a fan.","This is a great game that takes me back to the days when I did similar work in VHDL for my computer engineering degree.  In my computer architecture class, we built our way up to a multi-cycle CPU using Altera and it was a great way to learn how CPUs are built.  This game lets you do the same thing in a nice structured fashion and a simple, no pressure environment.  If you enjoy this kind of thing, consider a career in computer or electrical engineering!","As master-graduate in computer-science, but specialized in software-engineering, this is an intriguing travel back to \"hardware programming\" and logic curcuits, which where touched at several occasions during different courses, but were never put into perspective of modern computing.This game however manages to travel from NAND-gate to a full blown CPU with ALU and Registers. What's maybe missing here is a slightly better visualization. Especially for graphical i\/o-connections  and difference of actual and expected values.In its current \"hardcore\"-mode it may be too nerdy, even for most C.S.-graduates. Which is sad, because education in computer science only rarely manages dismiss the actual magic of modern computers or bridges the gap between theory and reality. Actually, in a bit more sophisticated state, this game may be used as tool for education in some sort.","Between Human Resource Machine, TIS-100, Shenzhen I\/O, and now MHRD I have learnt to love low-level computing after failing the subject at uni last year and not loving it so much.  Next step is programming microcontrollers in assembly if this brain fever continues.If you get through this game, the free online nand2tetris course will be a breeze, or vice versa.  So glad these games exist, they are brain training for computational thinking made fun.","The game is overall good, with some minor, and major flaws. I liked how it taught the concepts, but it was primarilly useless. If you didn't understand what the varioud gates are, then you'd probably either get a refund or search a video. The Idea of TED was a nice one...Most games I see force you to wire the same thing over and over, which can get quite annoying, but this game pretty much unlocks things when you get the general understanding...MOST of the time. The game's simplistic nature is very nice. With most games using electronic music, this game simply has the background buzz and whir of a computer from this era, adding a very nice tone and environment. The puzzles were oddly captivating. Ever since I found this game on a youtube channel (Nathan's Sandbox), I was highly intrigued, but did not think the puzzles would be this much fun.The documentation was, sadly, a bit lacking. Simple things that the game's demographic would understand, like logic gates, semmed to have been gone over in a bit too much detail, while things like buses were a bit too confusing, but, admittedly, it did get less confusing after enough time.I know this entire review so far has been minor, petty complaints, but overall, the game dev really has done a great job at emulating something like an FPGA, but I do have one large annoyance.The game has great potential to actually go over things like memory, because, understanding is much better than just making. The game, as soon as you finish MUX4B and DEMUX4B, throws at you the infamous DPP; D Flip Flop. While a familiar name to most people of this game's demographic, if the game really does want to go through a teaching aspect, WHY would you just give the player a D flip flop? It could be a chance to learn about SR latches, T flip flops, etc., And the game just gives it to you, saying TED somehow built it, despite the game basically saying he's too much of a novice to actually help. Again, petty complaint on my part, but, it did kinda weird me out how they game dev, up until this point in the game, has remained fairly consistent with what TED was allowed to give you, then just gives you a whole new part. Overall, the game has been alot of fun so far, and I do recommend it.","As a senior citizen, I was amazed to find out how to build a CPU based on a simple NAND gate through the process of breaking up a problem into modules and combining them in creative. This would have taken a university course and I would have been bored out of my mind.Instead, I was enthralled as I went the guided series of puzzles to solve more complicated ones using previously.I especially like the latest update (2017-01-18) which allowed the revision of previous designs when I thought of better ways to solve problems.Be aware that this is a text-based game. I prefer this as I do not have to struggle with a mouse.Especially for senior citizens, the good points are: Clear readable fonts Engages my mind rather my reflexes Auto-saving of current sessions Consistent rules for solving puzzles Comprehensive test engine to identify scenarios under which the design failsThis puzzle game has the following constraints: Limited space for circuit specification Strict syntax for circuit specfication Puzzles have to solved in orderOverall, I liked the game."],["Hard to call this 'a game', it's more of a manual\/tutorial on a simple CPU architecture, building it all the way from NANDs.If this suits you, you will enjoy the game. A bit short, but very educational.","Complex, clever and challenging. Would recommend to programmers and engineers.Interesting interface concept.","If you ever wanted to build your own CPU, that's clear 10\/10, buy it immediately and you won't regret. If you never had such an idea, go buy The Witcher or whatever, these nerds again are having fun in their weird ways, thank God we normal people don't do this stuff.","This game is forcing me to learn things, damn it!","A bit short, but fun","Really good game for logic thinkingPros:- Challenging- Doesn't force you to do repetetive tasksCons:- It's a bit short would like to see more tasks","Most players enjoy building from a simple NAND gate to a CPU, but I am not most player. As someone with physics background, I have to play my own puzzle on a daily basis, only that the building blocks are not NAND gates but sub atomic particles, up to the scale of a single piece of semiconductor. The excitement you get when you could explain, down to the level of standard model, how a computer works, is no small feet.","Very addictive. If you like writing code, or you are a fan of TIS-100 and other such coding games or you like digital circuits, you'll love this."],["This game is amazing. If you have even a slight interested in electronics, logic or programming then I recommend you pick this up!As a programmer myself I really enjoyed the game, it was well laid out and the tasks can become incredibly challenging while remaining fun. The feeling of satisfaction when completely a task is awesome.The game teaches some important fundamentals on how logic gates work and how computers work on the simplest idea (on or off) to compute incredibly complex things.","This game is amazing. If you have even a slight interested in electronics, logic or programming then I recommend you pick this up!As a programmer myself I really enjoyed the game, it was well laid out and the tasks can become incredibly challenging while remaining fun. The feeling of satisfaction when completely a task is awesome.The game teaches some important fundamentals on how logic gates work and how computers work on the simplest idea (on or off) to compute incredibly complex things.","After having played around with redstone in Minecraft I got quite the interest for digital circuits and the inner workings of computers. This game triggers that same spot of my brain as redstone did back in the day, and I love it.As others have said, the game can be really hard if you're not familiar with digital circuits, and a bit of programming experience will probably be of use too (just basics, such as arrays). The documentation is probably a bit lacking, so for people without experience I believe some research on the side will be of great help.For absolute beginners, I would actually recommend redstone in Minecraft as a good starting point. At least that worked well for me.I loved this game, but I wish the editor was a bit better. A good and easy enhancement would be to allow users to enter more text. As it is right now - at least as far as I'm aware - there is no possibility of scrolling in the window where you enter the hardware description. For some circuits you then have to enter several wire connections on each line, which makes getting a good overview very hard.","After having played around with redstone in Minecraft I got quite the interest for digital circuits and the inner workings of computers. This game triggers that same spot of my brain as redstone did back in the day, and I love it.As others have said, the game can be really hard if you're not familiar with digital circuits, and a bit of programming experience will probably be of use too (just basics, such as arrays). The documentation is probably a bit lacking, so for people without experience I believe some research on the side will be of great help.For absolute beginners, I would actually recommend redstone in Minecraft as a good starting point. At least that worked well for me.I loved this game, but I wish the editor was a bit better. A good and easy enhancement would be to allow users to enter more text. As it is right now - at least as far as I'm aware - there is no possibility of scrolling in the window where you enter the hardware description. For some circuits you then have to enter several wire connections on each line, which makes getting a good overview very hard.","This game was quite fun, if you're in to logic and hardware design buy it.However...Why is there no NOR gate in the logic section? Custom Part Designs?","It is not a game in a rigid way. It's a simulator of real engineering in VHDL \/ Verilog, but very funny.","This game was quite fun, if you're in to logic and hardware design buy it.However...Why is there no NOR gate in the logic section? Custom Part Designs?","It is not a game in a rigid way. It's a simulator of real engineering in VHDL \/ Verilog, but very funny.","Always a pleasure refreshing university's memories!","I'm happy I payed 10$ for this, but I'd happily pay more to get this game but with a visualization of the system over the hardware definition language. Save me the money on a scrapbook to draw everything out in.","Always a pleasure refreshing university's memories!","I'm happy I payed 10$ for this, but I'd happily pay more to get this game but with a visualization of the system over the hardware definition language. Save me the money on a scrapbook to draw everything out in."],["Great game, as it comes to learning on self experiense.But it still laks of some advanced stuff...  When you have non-readable specs, and only expected results.  Which you have to change because they are illogical to the task.   Which need to be optimize, to match time specs, because TED didnt done a good job. And jumpscares.... Yes a really scary game!","Great game, as it comes to learning on self experiense.But it still laks of some advanced stuff...  When you have non-readable specs, and only expected results.  Which you have to change because they are illogical to the task.   Which need to be optimize, to match time specs, because TED didnt done a good job. And jumpscares.... Yes a really scary game!","Have just made the MUX, thanks to my previous knowledge of Karnaugh maps.In the meantime, in the early 80's, I doubt many folks would have had 512KB of RAM. Being from that era, it was more typical to have 64K + 256K expansion.So much more I can say, as I have spent time with 6502, 6800, 6802, 8080, Z80, Z8000, 68000 CPU's from that era.","Have just made the MUX, thanks to my previous knowledge of Karnaugh maps.In the meantime, in the early 80's, I doubt many folks would have had 512KB of RAM. Being from that era, it was more typical to have 64K + 256K expansion.So much more I can say, as I have spent time with 6502, 6800, 6802, 8080, Z80, Z8000, 68000 CPU's from that era.","Very cool","Very cool","I'm lovin' it.","I'm lovin' it."],["Great game, but a bit short if you've worked with digital logic before.","Great game, but a bit short if you've worked with digital logic before.","As a developpement engineer, my coworkers took big loans to pay their 5 years studies, and I just get a high-level developpment degree after university and a 2 monthes Boole algebra curse.They learned how to implement a CPU during 3 years before working at a high-level dev, at 5000$\/year.I've learned it all after beginning work, for 10$.1024\/10, would transform IF in AND again ;)","Definitely an awesome game. Don't forget to buy a dry erase board beforehand, because you'll need it to draft out designs for all of the various devices you create!My only complaint is that we didn't get to use the RAM directly (which was a lot of fun to make!). I hope the developers add more functionality in the future, but it's still a very solid game as-is!","Definitely an awesome game. Don't forget to buy a dry erase board beforehand, because you'll need it to draft out designs for all of the various devices you create!My only complaint is that we didn't get to use the RAM directly (which was a lot of fun to make!). I hope the developers add more functionality in the future, but it's still a very solid game as-is!","As a developpement engineer, my coworkers took big loans to pay their 5 years studies, and I just get a high-level developpment degree after university and a 2 monthes Boole algebra curse.They learned how to implement a CPU during 3 years before working at a high-level dev, at 5000$\/year.I've learned it all after beginning work, for 10$.1024\/10, would transform IF in AND again ;)","After spending some time messing around and getting used to the commands, I was able to complete all tasks and I have to say, the journey was quite fun. I had to invest in a dry erase board to plan it all out, as it does get a bit tricky as you progress.For those interested in playing, I'm a programmer so for me, it wasn't overly difficult. The game is more about logical thinking than it is with actual code. The syntax is very simple and easy to pick up, and even working with buses isn't overly complicated - quite flexible actually.Another big point is this is actual real world knowledge! If you can grasp these concepts, understand bits, and complete the tasks you've grasped topics that are taught at college level in computer engineering. The components are real, and actually used in the construction of your processor in your own computer (though at a much more complicated scale). Real stuff here people! There are college courses and simulators that teach these same things, and not even as well as this does, and cost a whole lot more.I would recommend the game to players of all skill levels, and I would say this to anyone who seems apprehensive about jumping into this text based game - give it a chance, take it one task at a time and you will be completely surprised at how it all comes together in the end.I can't wait for more to be added to the game because for me, it was over too fast. But for $10 it was definitely worth it!","After spending some time messing around and getting used to the commands, I was able to complete all tasks and I have to say, the journey was quite fun. I had to invest in a dry erase board to plan it all out, as it does get a bit tricky as you progress.For those interested in playing, I'm a programmer so for me, it wasn't overly difficult. The game is more about logical thinking than it is with actual code. The syntax is very simple and easy to pick up, and even working with buses isn't overly complicated - quite flexible actually.Another big point is this is actual real world knowledge! If you can grasp these concepts, understand bits, and complete the tasks you've grasped topics that are taught at college level in computer engineering. The components are real, and actually used in the construction of your processor in your own computer (though at a much more complicated scale). Real stuff here people! There are college courses and simulators that teach these same things, and not even as well as this does, and cost a whole lot more.I would recommend the game to players of all skill levels, and I would say this to anyone who seems apprehensive about jumping into this text based game - give it a chance, take it one task at a time and you will be completely surprised at how it all comes together in the end.I can't wait for more to be added to the game because for me, it was over too fast. But for $10 it was definitely worth it!"],["Coming from someone thats only just entering the world of hardware design as  a self taught enthusiast, this 'game' is nothin short of exceptional as far as understanding and building upon the foundations of circuit design. Theres plenty of scope to expand beyond whats offered and i certainly hope the developers consider this, but for now, as far as foundation level skills go, this is bloody brilliant","Pretty good start, if a bit boring. Implement the basic logic gates from NANDs, then use those to implement slightly more advanced stuff, all using a simple HDL.But then comes the time to start implementing Flip-Flops and other clock dependent circuits and... there is no clock signal.Sorry, I understand that cyclic circuits are complicated to simulate, but in real HDLs signal propagation is very important and you can't just take the cycles out and add a magic signal delay component this late in the game.As you threw realism in the circuit design out of the window, I'll have to judge the game on what's left, and what's left is an anachronistic DOS editor with smart autocompletion in it, and very boring tasks.In this kind of game, you need either to stick to realism completely, and let people play in it like a sandbox, or add heavy artificial constraints so people have to think hard on what they are doing (like most Zachtronics games). Just making people type in boring half-adder designs won't do you any good.","Pretty good start, if a bit boring. Implement the basic logic gates from NANDs, then use those to implement slightly more advanced stuff, all using a simple HDL.But then comes the time to start implementing Flip-Flops and other clock dependent circuits and... there is no clock signal.Sorry, I understand that cyclic circuits are complicated to simulate, but in real HDLs signal propagation is very important and you can't just take the cycles out and add a magic signal delay component this late in the game.As you threw realism in the circuit design out of the window, I'll have to judge the game on what's left, and what's left is an anachronistic DOS editor with smart autocompletion in it, and very boring tasks.In this kind of game, you need either to stick to realism completely, and let people play in it like a sandbox, or add heavy artificial constraints so people have to think hard on what they are doing (like most Zachtronics games). Just making people type in boring half-adder designs won't do you any good.","Coming from someone thats only just entering the world of hardware design as  a self taught enthusiast, this 'game' is nothin short of exceptional as far as understanding and building upon the foundations of circuit design. Theres plenty of scope to expand beyond whats offered and i certainly hope the developers consider this, but for now, as far as foundation level skills go, this is bloody brilliant","Way too short for the price.  The decoder is pretty under-specified (what should the op1\/op2\/opCode outputs be when instr[16] is set?)  Maybe that was part of the puzzle to reverse-engineer the missing specs.  Had my hopes up for another Zachlike, but this isn't it.","yo","yo","Way too short for the price.  The decoder is pretty under-specified (what should the op1\/op2\/opCode outputs be when instr[16] is set?)  Maybe that was part of the puzzle to reverse-engineer the missing specs.  Had my hopes up for another Zachlike, but this isn't it."],["Had a lot of issues with window mode. Wasn't able to refund it because it was runned in background on my Mac laptop.","Slozhna","Short experience (finished it in an afternoon), but very educational and fun. I thought the gap from logic gates to a cpu capable of interpreting machine code was far greater. It's very clear that what you're building in here is truly a similar structure to real cpus, just smaller and less capable.The inclusion of Ted was an awesome and fun design choice, great way of solving the boredom problem.","Pros: delicious logicnice progressiona refreshing change from normal programming tasks Cons:kind of shortclunky editor (chops off characters at line end and screen end)really would have been more enjoyable with a graphical designer or at least representationsome descriptions are confusing (e.g. negation)some way to specify additional debug outputs at specific points would have been helpfulreally would have liked to be able to create my own designs for re-use in assigned tasksIn short:good game, don't regret buying it, I just wish there was more.","Pros: delicious logicnice progressiona refreshing change from normal programming tasks Cons:kind of shortclunky editor (chops off characters at line end and screen end)really would have been more enjoyable with a graphical designer or at least representationsome descriptions are confusing (e.g. negation)some way to specify additional debug outputs at specific points would have been helpfulreally would have liked to be able to create my own designs for re-use in assigned tasksIn short:good game, don't regret buying it, I just wish there was more.","WAYS BETTER THAN MY TEXTBOOK!","WAYS BETTER THAN MY TEXTBOOK!"],["Great game if you want to delve in to logic gates, arithmentic processing and ultimately build a small CPU!Not for the feint hearted!"],["Pros:+ Learn how to build a CPU from the humble NAND up+ Somewhat challenging puzzles (depending on your education)+ Learn fundamentals of programming in a HDLCons:- Short- No sandbox- No triggers or events (D-Flip Flop is only clocked primitive)Note: If sandbox was available, clock signal could be extracted from DFFDecided to play this in between work sessions for a bit of relaxation.  Note: I don't use paper or whiteboards like the game recommends, most of the components are easy enough to think through.  You just have to remember, the multiplexer is your friend.  If you get stuck, look up the free course \"From NAND to Tetris\" (Nisan, Schocken).There seem to be a lot of comparisons of this to the Zachtronics games, however, I think this fits a slightly different niche: This is closer to practical hardware design.  I also play the Zachtronics games and enjoy them thoroughly, but the designs there are largely fictional.  I could trivially port the designs in this game to actual hardware.If you work with HDL all day or are in a uni course on programmable logic it might be a bit boring.  Most of this is taught in the first week of an HDL course, along with some more engaging examples.  It's been a while since I went to uni and did hardware design; so this was an interesting refresher.I would also like to add that I hope to see more from this developer on MHRD, or another game on steam in the future.TL;DROverall I would recommend this game if you are interested in hardware design, especially on discount.8\/10"],["The final thing you make is rather hand holding, but after all of the schematics you've made up to the final thing to be made, there is joy in knowing that every single thing that was made up until the last thing has been put to use in some fashion. The occasional simulated lag was a bit annoying, and I couldn't quite figure out what made that subtle annoyance happen, but for me didn't happen too many times in a row to be too much of a monkeywrench in my thought process lol. If you are the kind of person who wants full achievement progress in all of their games, just looking up the answers online should be enough to obtain all of the achievements if you can't think of all the answers yourself, since the whole game really is just designing hardware components. No sudden twists where the game suddenly becomes an FPS at Bill Gates's house or anything like that, if you thought that all programmer-like games had something to do with Bill Gates for some reason. Anyways, a fun game that I enjoyed solving all the problems by myself for, and having the answers around might actually help me with a class in school later on in life if I copy the schematic diagram from the code into my notes, although probably not all of the material covered in a digital electronics course at college is covered in this game, although I'm just guessing on that last part."],["I struggled with giving the thumbs down here, as I love the idea and would hate to discourage the dev, but I would honestly not recommend MHRD to friends. It's not so much that the game is bad, but more that it's an inferior paid competitor to a free course.  I'm satisfied with what I got from the game and don't regret my purchase and time investment, but unfortunately I'd have to recommend going through the first 6 chapters of the NAND to Tetris course instead. (But boy will I feel guilty if my single review downgrades the overall aggregate rating.)http:\/\/nand2tetris.org\/courseMy primary concern is that when you complete this game, you will not have the tools available for the theoretical next step of working in assembly code. If you had invested the same time in the NAND to Tetris course, you can continue to work up the layers of abstraction, with the promise of being able to build a compiler and then a game.  But with MHRD, your output will be locked into its specific system, with no way to expand on your work without hand-porting your designs to another system.I support many of the points in the top-rated positive reviews, so I'd like to confirm that the simulation is indeed complete and fairly non-buggy. I mention that, because I will not retread the good points, and hope you will take a look at the positive reviews for balance. Also, compared to the free course I mentioned, this game is a more complete integrated package, compared to the rough-edged hodgepodge of tools packaged as a zip.  But with that streamlining, this game doesn't have the robustness and versatility of the free tools of its academic competitor.Plot-wise the game doesn't have the witty humor of Zachtronics games. The flavor text starts with promise, but remains uncomplicated from beginning to end. Beyond the mention of Ted, there's no interesting surprises here. (Spoiler! You build a CPU! Your boss sends you a happy congratulatory Email! And the game does not suddenly turn into an open-world adventure where you traipse around rising Asia with Ted to close an outsourcing contract!)Another feature missing from Zach-likes is that while there are multiple ways to solve the chip designs, there's no easy way to compare your NAND counts with your friends. Not a big deal, but it's something you don't realize you miss until you boot up another Zachtronics game.While the controls attempt to kindle the nostalgia for the past, I found them a hinderance for inputting the solutions. While most of the game is intended to be played with pen and paper, I found that this insistence of archaic keyboard-only controls made the text editing experience distinctly unhelpful.  With my computer setup, I was also unable to copy solutions from the clipboard.  None of these anachronistic helpers would be necessarily implied by the setting, but I really wished the dev would not be a fundamentalist about omitting them.  At least support Vim\/Emacs bindings, sheesh.This clumsiness with the user experience extends to the documentation, printed as it is in the needlessly archaic interface. Descriptions are not as in depth as free chapters from Elements of Computing Systems, sometimes even lacking fundamental context. I appreciate that others may have liked the immersion of the interface, but still question the design, given that free textbook chapters offer superior readability and content in pdf\/paper form.While I was able to complete the game, if I was to start again, I'd unfortunately have to recommend using the simulator provided by the NAND to Tetris course instead, and reading the free chapters from the companion website.  I'm happy to have supported another game in this genre, but as it is, MHRD doesn't add anything more to what is available over the free offering of NAND construction simulators.","Fun game.  Wish it had vim keybindings.","This game reminds me a lot of the time when I was a kid with one of those electronic kits and learned the basics about it. Only this time it's about building a CPU from the bottom up - how cool is that!Although the game is strictly textual and thus very technical and \"dry\", it has a bit the charme of a round based game where I repeatedly told myself \"I'll just do that one next thing before I finish for today\".","Small Intro Worth every penny. This game is ideal for anyone interested in the realm of electronics, computer science or even maths. Although the game is short it is sure one hell of a workout for your brain especially in the later stage of the game. Pros Challenging for your brain Based on how a real CPU works Educational Immersive in a way with the whole background audio and keyboard sounds Trading cards + achievementsCons Bugs bugs bugs, the game sometimes gets stuck while you're typing which causes you to lose focus, moreover, the achievements are broken however there is a  workaround  Ted, he creates magical circuits and doesn't fully optimise...Things to improve Add functionality to be able to create your own circuits and therefore modularise the cpu further Add an easter egg chip Add better storage circuits such as SR Flip etc.Unforunately we will not see improvements#Discussions_QuoteBlock_Authorhttp:\/\/steamcommunity.com\/profiles\/76561198023667160] icy {developer}[\/noparse][\/url] To be clear: The game is sold \"as-is\" and no future content should be expected!"],["Very cool!Good for first try for myself in hardware.I was stunned, when realized that there is restrictions for code size (screen width and screen height)! Sure - this is bug.I wish there will be north bridge and video card levels,  or maybe some steps to Notch's DCPU-16.And in advance - VDHL or Verilog. And then put it to FPGA...","Very cool learning game, you will discover how to create a computer from scratch.The game playfully bridges the gap between logic gates and assembly.Previous experience in logic might help (cf circuit coder on ios).TIS100 lovers should feel at home.","Some people have made comparisons of this game to the Nand2tetris course. Let's take a look:Nand2tetris comparison: Teaches you the basics of digital logic by building a \"CPU\". Fake Hardware Description Language. No graphical interface for component design. Fake DFFs that are not real world accurate. Horrible debug tools. At no point will you be able to implement in the real world. Have to purchase in order to get feed back.That's what they have in common. Let's take a look at some differences.Differences: $65 for coursera vs. ~$10 for MHRD. Nand2tetris has open sand box design tools which are free($0) and free(GPL). You can purchase the book for Nand2tetris for the second half of the course. MHRD has a leaderboard that lets you compare your solutions(nand count) to others.When you finish MHRD you are given the standard \"To be continued...\" message. I'm assuming that the next game will be moving into software, like assembler or such. I'm also assuming that we will be in ~$10 price range again. When you finish the Nand2tetris course you are given the same thing. You can purchase the Nand2tetris ebook for ~$24 to read material that will be covered in the second course. In both cases you will not be getting the second part now. In both cases you will learn a great deal about how computers work.Basically, MHRD is a lot cheaper and is a game rather than an academic offering. I think that some people will scoff at a game, and some will not have the patience to deal with professors. Games are for children and professors drag a one week subject into seven weeks. It really depends on you. But you are reading this on Steam... just saying.If you like logic puzzles, you will love this game. It is literally working with logic - digital gate logic. Some of the \"puzzles\" are quite hard, but definitely solvable. Personally I loved it."],["Spanish:Este juego es simplemente genial. La interfaz es muy muy sencilla (simula un sistema MS-DOS al fin y al cabo) y eso hace que no haya que tener fluidez con ningn tipo de controles (aunque saber escribir rpido ayuda, claro). La progresin de dificultad est muy bien hecha y permite al jugador entender poco a poco la estructura base de un ordenador. Me gustara que se muestre el diseo funcional de los componentes que Ted completa por ti, pero tampoco es algo que sea necesario. He de decir que algo que s he echado en falta y que me gustara que implementaran es un mtodo para crear tus propios componentes y hacer los tests que t quieras con ellos, puesto que ahora que he terminado la CPU y se ha terminado el juego (de momento, espero que aadan algo ms) no tengo nada con lo que seguir enredando. Insisto, esto es algo que verdaderamente hace falta en el juego.Le dara 4\/5 estrellas solo porque falta eso. Por lo dems el juego es impecable, simple y complejo a la vez.Recomiendo totalmente este juego a aquellos que tengan inters por el tema. Vale muchsimo la pena.English:This game is just great.The interface is very very simple and you don't have to have fluency with any controls.The difficulty increase is appropiate and allows the player to understand little by little the computer's base structure. I wish the functional designs of components that Ted does for you were shown, but it isn't essential at all.Something that I've really missed and that I would like it to be implemented is a way to create you own components and do the tests you want with them, because now that I've finished the CPU and the game is over (for now) I don't have nothing to keep messing around with. This is something that is really needed in the game.I would give it 4\/5 stars just because that is missing. In other respects the game is flawless, simple and complex at the same time.I recommend this game to everyone who has an interest in the subject. It's very very worth it.","Pretty good.  Definitely unique as a programming game.  If you already have some background in low-level programming or hardware engineering, you'll be right at home.  Otherwise, you might not have the patience.  There should really be a demo for this game.","This game is definitely worth the $6 I paid for it, and it would probably be worth the ten it is now, coming from an aspiring electrical engineer. It is incredible learning how a computer works, and if you get stuck you can watch Crashcourse's videos on YouTube about computer science.","I enjoyed this game, even though it's not very game-like.  It's a lot like a basic digital hardware design course, minus the boring stuff and clock details.  My only complaint is that there's no debugger, so when your design doesn't work you will use scratch paper and your brain to figure it out.  Try it - it's fun!","I realise this game will not be to everyone's taste, but this has been really fun so far. There's very little hand-holding, but running the tests is very fast, so it's possible to see quickly if something is wrong. If you enjoy logic\/circuit design then this is for you. Only small disappointment was that the DFF was simulated. I do realise that this would make things a lot more complicated, however. You might want a copy of Mano standing by ;)"],["I enjoyed it. Felt a little barebones though. Actual clocks and running circuits (in realtime) could make it more enjoyable; especially if it had some visuals."],["MHRD is a fun little puzzle game about building digital logic hardware from two of the most basic components: NAND gates and Flip-flops. Using these basic parts you build more and more complex higher-level components, until in the last challenge you design a simple CPU.The game doesn't run very well on my Mac: the game randomly freezes for a couple of seconds now and then, and it crashed once (losing me a few minutes work on the decoder). Not huge problems, but definitely annoying. I don't know if these issues are Mac-specific.Other than that, the game is set up pretty well. There are clear in-game instructions, and you're carefully walked through the first few steps before the training wheels come off. The interface is an 80s\/90s MS-DOS style text-only interface with a simple text editor where you type in your designs. The editor has some mildly annoying quirks but is overall functional. Each full design must fit into a single screen of text: there is no scrolling. One screenful is plenty, but you do have to limit your empty lines and comments.A design is made by grabbing a few existing parts, putting them together, and describing how the components must be wired to each other and to the design's inputs and outputs. Not traditional programming as you may know it, but basically just a textual definition of how to wire up components. You get a clear description of what the expected behaviour of your design is, so you're never flying blind. After making a design, you run a bunch of predefined automated tests to verify your design is correct. It gives you all the details of successful and failed tests, including expected and actual output, but there are no debugging facilities.The game is pretty short. You step through the abstraction levels very quickly, and the final challenge arrives before you know it. I finished it in a bit under 3 hours, and I took it slow. For the price tag, I won't blame you if you think this game is too expensive. Having said that, I am an experienced software developer. Without a programming background the game will probably be significantly longer and more challenging.There is a little framing story, but it's very thin. This is not a story-driven game.One nice feature is \"Ted\", a coworker you run across early on who will take a lot of tedious copy\/paste work out of your hands. For example, for the CPU you will need a 16 bit adder. You first design a 1 bit adder from scratch, and then you design a 4 bit adder to prove you can combine multiple adders to form one bigger adder. After that, Ted comes along and spares you the tedium of building the 16 bit adder. He creates it for you and it's instantly available for you to use.There is very little replayability. Other programming games usually have a bunch of optimization challenges to bite into after the main campaign, but not here. The test runner tells you how many NAND gates are in your design, but doesn't give you a challenge or reward.Does this game teach you how to design logic circuits and real CPUs? No. And it's not meant to, I'm sure. It does teach you a bunch of fundamental principles, but don't expect to jump from this game straight into real hardware design. It's a fun introduction to the subject matter, but nothing more.Pros:- Fun puzzles- \"Ted\" prevents tedium- Combine results from earlier puzzles in later ones- Uses real-world principles of logic circuit design, but requires no previous experienceCons:- A bit unstable on Mac- Short- Easy for experienced programmers\/hardware designersOverall, recommended if you don't mind a short game at this price point.","Just for electronics engineers or alike.Interesting to see how logical doors and rest of logical electronics elements can be built from the smallest pieces.If you don't know nothing about truth tables, OR, XOR, NOR, AND, NAND, etc., just stay away, this is not your game.The interface is poor, comparing against spacechem interface, by example.","If you want to engineer your own computer, this is the game for you. From the simplest of components (NAND gates and data flip-flops), you'll build things like multiplexers, RAM, an ALU, and eventually an entire CPU. It's hard to describe the feeling of accomplishment you'll get when your designs pass verification. The components in the game are the same as their real-life counterparts, so winning means you've actually designed a CPU that could theoretically be built. There's nothing like it.The 80s PC startup sounds and monochrome IDE are a real nostalgia trip. Component specs are generally clear and concise, and there's virtually no plot, which is refreshing in an age awash with \"cinematic\" walking simulators.The only criticisms I have are related to the text editor. The worst offense is that it doesn't support more than one page. Low-level stuff needs lots of comments to make it readable, but the length limit forced me to cram everything together and remove my explanations of what I was doing. Also, the END key and word wrap are buggy in certain situations.Overall, I had a great time. I'd like to see more \"learn by doing\" games like this on Steam."],["I wanted to like this game, but it plays like a bad homework assignment from an intro to digital logic course.  Regardless of your background, save your money and pick up Shenzhen I\/O and\/or TIS-100.  Those games are vastly more fun, educational, and challenging.If you are familiar with logic design, this game is trivially easy, often tedious, and fairly short.  I fully completed with in 3.5 hours, and unlike other games in the genre (like those above or Human Resource Machine), there is very little incentive to spend any time optimizing or improving your design.  A large portion of this game is taking a part you have already build, say an 1-bit adder, and extending it to 4-bits.  You do this for nearly ever part in the game.  Also nearly element you design is incredibly simple and mostly standard parts (all but the last couple are standard building blocks and require just a couple of components assuming you know the hierarchy), and you end up with a rather boring game that presents virtually no challenge to anyone who has a background in the area.Now you might say it is not for those people, and it is intended for people without such a background.  That may be the case, but I think those people are going to have a terrible time learning anything from this game.  Basic design concepts are completely missing.  There is not much of a discussion on Boolean logic in a general sense, de Morgan's Theorem is never discussed, nor is 2's compliment, and sequential logic is nearly completely abstracted away.  On the note of sequential logic, there is no discussion of latches or how flip flops are made even though you have the parts; you are simply given a flip-flop black box when it is needed. Add that to the fact that you really are not given much of a sense of how good your design is, and it is easy to see how this game fails to teach much of anything.In conclusion, the game is short and boring to anyone know has a basic grasp of digital logic design, and it is like going to be frustrating and mostly un-educational experience for anyone who does not.  The stuff Zachtronics puts out is substantially better for both groups of people.","This game consists solely of, from what I've seen, a simulated console interface. With that in mind:1. How does a game like this weigh in at 110MB?2. How does a game like this suffer random stuttering\/lag?","The game is based on the \"HACK\" computer developed in the course \"From NAND to TETRIS\" and in the book \"The Elements of Computing Systems\", both developed by Noam Nisan and Shimon Schocken. While Nisan and Schocken allow free use of their teaching materials, I believe the game should give credit to the creators. The course actually comes with exercises (complete with hardware simulator) which lets you do pretty much exactly what this game does, and more: It completes building a full computer using the CPU and adds keyboard input and video output. It even lets you program the HACK computer.That said, the game was still fun, but for I was able to zoom through it in 5.2 hours. Therefore I'm a bit confused about the target group: If you don't know about hardware design, you might be better off taking the course in order to properly learn the fundamentals. If you do know VHDL or Verilog, the game may be quite simple.All in all, it was fun enough, but not up to the level of TIS-100 or Shenzhen I\/O."],["This game was a lot of fun. I learned a lot about how different components worked and how to design them. It was a pretty quick playthrough. I hope to see an update in the future to continue beyond building a CPU. It would also be neat to have some achievements as incentive to minimize the number of NAND gates used in each of the components, because I found that to be a lot of fun once I finished the game.","Quite awhile ago, a little over 18 years to be more precise, I took a hardware design course as part of my degree.  We had to learn how to use NAND gates to build a computer, or at least a functional ALU...  Cut forward to the present day and I find someone has turned a vaguely identical course in to a programming-like computer game!  So I jmped at it.It is essentially a cutback hardware description language where you start with a single NAND gate and have to specify every other component in a 16-bit RISC CPU component by component from the NAND gate up.  Each new gate or component is presented as a \"Task\" to be completed and the game is simply developing each component in turn.  You get given descriptions of the purpose and specification for each part, complete with truth tables and ASCII art wiring diagrams.  The \"answer\" is written in a fake, simple, but actually entirely pleasant pin wiring language, not wholly unlike commercial products.  There is no pain of trying to lay out circuitry on a PCB (as in Shenzhen I\/O), it's purely describing how the pins need to connect.This could end up being a little repetitive, as pin wiring for 16bit muxers could require quite a lot of typing, but it has bus syntax for multi-pin inputs and outputs, and the game makes you develop 4bit version of things to prove you know the theory and has an assistant, Ted, do the grunt work and write the 16B versions for you.  Thus removing a lot of the tedium without sacrificing any of the learning or sense of achievement.The specifications are sound, I only got a little lost on flip-flops, where I understood the concept in the real world but the presentation in the game was a little lacking.The aesthetics are, to me, quite fun.  The system is implemented as a 1980's style text-terminal.  I switched the monitor setting to pure-green for full authenticity.  It's entirely keyboard controlled, menus and displays are all ASCII art generated, reminded me of coding for text terminals back in the 80s\/90s.  The code editor is fixed width and fixed length, but functions much the same as a modern editor.  The game constantly makes an old-school machine whirring sound, and heavy cursor movement clicks, which could possibly be highly irritating to some, but I left it on, there is a setting if you dislike it.So all in all, highly educational and a great refresher for my memory.  That said, I completed the game in 5.7 hours play, so don't expect a long experience - but as I said, the concepts were familiar to me.(NB. I've been playing programming games all week, Human Resource Machine, Shenzhen I\/O and this.  They all are great, in different ways.  This one is the most basic, being entirely about logic gates and fully text based, but it is nice to see the lower level in clear relief, after working on the microcontroller level \/ assembler for a long time beforehand.)"],["As a 19 year old student with passion for hardware design, it is really amazing to find such a game ( \/ simulator ) after too much time searching for one, great job with the game creation \/ idea and please give us more levels"],["A very fun game. It's pretty much as the description says - you build various logic circuits up to a CPU. If you're almost entirely new to binary logic, like me, I think it's both an interesting and rewarding way to get acquainted."],["If you do NOT have much background in computation or digital design, I can see some aspects of MHRD being decent, though it is not good enough to teach you \"everything.\" It definitely misses (or intentionally avoids) some information about the circuits themselves and clocks\/sequential logic.If you DO have good background in the area, then there's a 50\/50 chance that you will not like the game.Note that I would not say the game is worth the $10 at all, because indeed you can learn more by simply reading online and testing out in a few other places. Still, the idea and implementation is not bad.Despite myself having a big background in hardware design, it's been a handful of years since I've dealt with some of these things, and I was interested in refreshing myself and seeing how MHRD turned out. The syntax of the game actually bothered me a little bit, but that was a personal preference issue, I'd say.I think the game definitely starts out in a sensible matter, showing you a functionally complete gate, the NAND. Then the game slowly builds itself up to some more complex parts for a little while, most of which I easily blew through. As I have a background in this area, I cannot properly judge most of the pacing for people learning it new.However, what I can identify is that the game does scale too quickly once it throws the Decoder and CPU at you. I feel like someone trying to learn information this way would suddenly freak out, even if they made it all the way to this point. I am not sure how the developers would have gotten around it other than maybe breaking those pieces up even more into separate tasks.With that being said, I still feel like some people would find it fun to learn in this format, and it seems like a decent amount of people who have reviewed the game confirm that."],["It's games like this that make me wish there was a middle rating between \"recommend\" and \"not recommend\".On one hand, it is exactly what it says on the tin. It asks you to (ultimately) build a rudimentary CPU out of parts made from other parts made from NAND gates, and it expects you to build all those parts with a text editor.On the other hand, it's nothing more than what it says on the tin. I've learned enough about down-to-the-metal hardware to know how to make every part the game requested. The 4.6 hours I logged were mostly spent either drawing out the solution, or typing it up.It's hard to recommend this game to anyone without any knowledge of computer logic or hardware because they'll be lost very early. It's also hard to recommend this game with such knowledge because it's so basic. But I still respect it nonetheless, and it could be something really great if it had either A) More teaching to it, or B) More puzzles, depending on whether you want the target audience to be people that want to learn computer hardware, or already know computer hardware."],["Kinda fun, but:- You can't run program on CPU. Does it work even? :(- Lags sometimes- No saving progress to steam cloud- The editor doesn't have code highlighting (it would be cool to highlight parts with different colors)- The editor doesn't allow to write more than 50 lines or so (hard to structure code sometimes)- It's annoying that you can't leave comma after the last wire"],["This game was not for me. While a bare bones UI is fine, as evidenced by TIS-100, this game doesn't come with much story. It's essentially a very primitive programming language, reminiscent of the 2nd year courses in Computer Science where you design a CPU.Edit: OK, it turned out that this game was for me after all, but only because I'm a masochist, and I was rereading \"The Elements of Computing Systems\". I can't possibly recommend this game to sane people."],["Finished it and can't really recommend this to anyone.- For the very begginers, it does not explain most of the stuff underneath, making it too complex.- For more or less seasoned engineers it's too short\/easy\/linear and is totally no fun.- Yes, optimization can be fun to get job done with less gates, but the 'game' does not even ask you to optimize.- SFF is not really SFF, just a mere substitute that may be misleading.Overall: no fun, no challenge. *Maybe* can be interesting for total noobs, but because of lack of detailed explanations would be too hard for almost any non-technical person."],["I want to like this game, I really do. It is way way too short however. I finished it in just over 3 hours and it ends with a to be continued. The game was barely past the tutorial and just getting into the interesting parts and then it was already over. It is a lot of fun if you are an extreme techie like me. It would be nice if the syntax supported arrays of parts as well as busses though. Also, alt-tabbing away seems to crash the game. Also, for reasons I can't really comprehend, the grame frequently freezes for a second or two. Also, it would be nice if you could create your own designs to use as sub-parts for the more elaborate projects. Also, it would be nice if you could create aliases, internal wiring nodes, or internal busses for commonly used connection points. Also, it would be nice if we didn't have to fit all of our code on one screen. It would also be nice if we could select sub-components of other components so that we didn't have to recreate entire components from NANDS to avoid redundancy. Still fun, but I wish they had done more with it."],["It's a little too elementary for someone very familiar with logic gates, and maybe a little too hard for someone completely unfamiliar with them (but don't let that scare you if you're already interested in the subject). But if you're in between, then this is probably the perfect game for you. If you've played TIS-100 (a game I highly recommend), you should feel right at home."],["Hidden gem of a game...  reminds me of NAND2TETRIS course http:\/\/nand2tetris.org\/"],["awesome game. probably a little hard if you dont know about logic and boolean algebra in the first place though. absolutly love the design, but there are two things id really appreciate: - array index starting at 0 - unlimited rows to design the hardwarestill love this game!","This game isn't something you should buy if you're not at least a little bit nerdy.  It certainly isn't something you should buy if you're not at least a little bit interested in computers.  But if you want a game that will make you mildly suicidal; a game that will keep you awake at night thinking about that puzzle you couldn't solve; a game that is both rage and ecstacy inducing, then definatly buy this game.  Even if you're not in the least way computer or electronics-savvy, but are willing to learn, this game is certainly up there with the best to buy, even for an absolute beginner.  I'm not trying to convince anyone that I'm anywhere as good as some people when it comes to this game - I've even had to cheat from time-to-time - but this game will improve upon your computer engineering skills no end.  I kid you not when I say that this game has changed my life.  If you want it, it is most definatly worth the price."],["This game is more interesting to me than most of the other programming related games I've played simply because you only start with a single operation (NAND) and you have to build up everything else on your way to creating an entire CPU. There are a few exceptions to this, like when they introduce sequences and memory with the DFF, but overall, it really makes you feel like you are creating everything from scratch. And since the parts you build are based on the other parts you build before it, all of your scores are based on how lean your previous components are, so you can really see how an inefficiently made operation at a low level can really affect performance at the higher level as you progress through the game, and go back and refine them to improve your final scores.If you like programming games and have a good understanding of logic gates and their uses, I highly recommend this game. The embedded programming language and specifications are very simple; however, it might be a bit too much for the novice\/inexperienced programmer."],["Fun game fo those interested in programming or hardware design, or just wanting to learn a bit about it. Along the lines of the Zachtronics games, but closer to the real-world versions of the things than the more abstracted elements found in his games."],["It's less scary to me than learning an actual HDL","What a great game if you want to understand how hardware circuits work, just wow!","With an interest in (but not very good at) low level programming, assembly, logical operators and how it is wired to the hardware, I enjoyed this game. Unfortunately, it is a bit unpolished and some things are a bit clumsy like the auto complete, the limitation of the amount of lines of code that restricts you from nicely commenting stuff or the 'tab'bing between documentation and implementation. It can be a short depending on your skill and the documentation\/specification is sometimes unbalanced (sometimes too broad and sometimes too narrow).If you like games like Human Resource Machine, Shenzen I\/O or TIS-100 and you can see through the above it is certainly worth your time."],["Pros:- Interesting- Educational (ish)- Stimulating- EnjoyableCons:- Clunky- Sometimes frustratingI'd recommend this game to anybody interested in learning more about electronics or circuitry. The game has you gradually design different logic components, explaining what they do, and leaving the rest up to you. It also builds upon itself, since you can use designed components in every level after they are created. The interface is pretty clunky, however, and I would recommend sketching out your plans before starting implementation. This game made me feel good about myself, and was an interesting challenge (it will be a total breeze for anybody with a real background in this area, which could lessen the fun).TL;DR Buy it, especially if you like Zachtronics games"],["Having built my own legacy 7400 IC type CPU, this game by title alone intriged me. What a great idea!  But from that initial excitement, I had to come to terms with several odities.First off - the designs are all based on NAND chips. That's a waste to just do a NOT gate. I had really hoped that we would start with a humble transistor\/FET and created the first basic components there. A transistor count would be a lot better than a NAND gate count anyway - and I could make the designs a lot more efficient this way.  Second, creating common busses between elements is important. This game assumes that if you create one bit \"flip-flop\" you just tie them togther and repeat ALL the logic to make 8 bit. Some of the design elements \"merge\" when you do this, and it's not really possible making those kind of optimal designs.Third, and this may be the most important. This is ALL text and horrible to navigate. You cannot view your wiring and the requirements at the same time for instance. The main editor cannot scroll, which eventually leads you to having to cut out comments and other things to make the flow easier to read.  There simply isn't room.  Connecting elements seems to be a perfect fit for a simpel graphical design, which would make design failures like connecting multiple lines to the same input easy to detect and prevent. Fourth, the memory perspective is wierd. I don't even get to design my own flip-flop? The whole delay system based on clocks, while to a degree true, makes debug and understanding the test cases very hard to understand. In all my testing with my 7400 I always test after each clock - not before. And the fact that this shows me the before and after is just confusing.One aspect that I really like is that while you may think this is programming, you quickly realize it's not. It's simulating hardware and just hardware connections you're playing with. All that said, I enjoyed the game.  It can definitely be improved and made more challenging. Why not create your complete ALTAIR 8800 - with busses, memory and basic I\/O? Having to deal with IRQ and even ports would make this a true challenge."],["There are very few games that leave me wanting to do more when I finish them. As the game ends, you will mostly rely on work you have made before. It is really illustrating on how such an iterative process technology can be, and really left me humbled on what a wonder of human ingenuity a CPU is. The game is capable of giving a really nice understanding of the innards of a CPU in under 6 hours, while forcing you to really understand the labour of every single component. I've had courses in college that failed to do so even in 60 hours.That said, recommending this game is somewhat difficult for me. Have you studied logic (knowing Morgan's laws will help you down the first steps), engineering or programming, or have any interest in those? This game is for you. But arm yourself with patience, and, if you despair, take into account that since the first logic gate(based in electrical relays circa 1890) to the first CPU passed like 60 years, and that, even with directions, you are attempting what simultaneus investigators took a lifetime to unravel. Be patient and go get a notebook!Me myself, being a programmer professionally and a gratuate in electronics engineering, have really enjoyed the game. Though, if I had to critique something, that would be that I found the text editor somewhat limited and cumbersome and sometimes the reference truth tables left some space for ambiguity.Regardless, I enjoyed the game, even with its limitations, it does what it intends quite nicely. I can't wait for more levels, and to be able to program the CPU (A man can wish)!"],["I was always wondering how a cpu is made. The syntax seems difficult at a glance, but I soon found out it's much easier than it looks.   As a measure to learn about CPU, and as a puzzle, I'm enjoying this agame a lot.Also, if u are enjoying\/ interested in this game, you will love Charles Petzold's book \"Code\" Vise versa is same. If u happen to read the book, I'm sure you will love this game too."],["Old hdd & cooler  noise makes me sleep asleep...."],["The game gives poor instructions for each task. Often spent over half my time on a given task trying to figure out what they want in the end. Instructions contain information for other tasks that is not relevent to current task... overall confusing.Puzzles were relatively easy, and the entire campaign was complete far too quickly. Spend your money on a different puzzle game to get more for your money"],["\"Numbering of pins starts at 1 (no zero based index)\"  Tempted to give this game a 0\/10 for that."],["Why you should get this game: it's a pretty elegant way to learn the basics of digital computing. It's also pretty fun.PROS:+ Very simple to get into+ Very educational+ The in-game hardware description language is suitable for the small parts used in the game+ Simple \"old-school\" keyboard only user experienceCONS:- Limited editor size (no scrolling)- Lacks explanations (could be looked at as a pro if you like covering the material somewhere else)- Very short game and the end result which is a CPU cannot ultimately be seen being used in an actual propgram (though perhaps there'll be sequels to the game)CAVEATS:* Probably requires previous knowledge in computing, preferably academic (computer science, electronics engineering, etc)Overall a good puzzle game that is worth its price. It's also a good jumpstart to similar experiences in hardware simulation (whether it be in a game or some real tool that simulates harware)."],["A great puzzle game for people interested in computers, and a great learning tool if you need to pass a logic\/electronics class for a CS degree."],["I really, really want to give this game a positive rating. I can see what the developers are trying to do and I think its awesome and, if done properly, a great way to introduce hardware design fundamentals to people who have never seen them before. However, there are just so many little things that detract from an otherwise fun and educational experience. If you don't want spoilers, you may want to stop reading now.First, when you open the game, you're immediately greeted by bright white monospaced text on a completely black background. I couldn't look at the interface for more than a few minutes without getting a headache. You do have the option to change the white to Matrix green or....rust? orange, which helps a little bit, but honestly you're working with just a foreground and background color, it shouldn't be that hard to let the user pick from a wider selection for each, for maximum comfort. The sound design (which really amounts to just the same click that you hear every time you press a key) is actually very satisfying, the same way typing on a good mechanical keyboard is. Nice job devs.The initial gate puzzles are fine, though I'm a bit confused at the exclusion of the NOR gate. The multiple-input gate puzzles are also fine, there's not really a way to spruce those up.The bus puzzles, though, are less fine. There's not a lot of educational value to be gained here, just copying and pasting the same line from the earlier puzzle, four times, and changing some numbers around. I get that this is probably to introduce people with no hardware design experience to the idea of \"you can put related wires near each other\" which eventually leads to the idea of creating a bus, but these levels still just feel like busywork. Fortunately, the game quickly introduces Ted, so you don't need to copy and paste 16 lines, only 4.We then get into the \"advanced circuits\", for which I don't have a lot of gripes that I haven't already said. For someone who has never seen binary arithmetic before, I think that a little more explanation could be helpful for the half adder and one-bit full adder, beyond just the given explanation of the two's compliment. The ALU is a bit of a curveball in this section, because it is the only circuit in this section that doesn't have a well-defined purpose or a clear reason for why its inputs map to its outputs in the way that they do. The multiplexer chooses inputs, the demultiplexer chooses outputs, the adders add, and the ALU...flips bits sometimes? Its not a standard building block of larger circuits like the other three are. I feel like it would fit much better in a separate section dedicated to CPU-specific parts, with the decoder and the CPU itself.Next up are the sequential logic components, and I feel like I'm too experienced in hardware design to evaluate this section fairly. After a few formal classes in the stuff, the idea of \"a memroy element propagates its input to its output on the clock edge\" is completely second nature, but I can't say how someone who's never heard of an RS-NOR latch would find the presentation here. Though, I think if one could figure out how to turn the DFF into a register, the other components follow the same basic formula. Its just wrapping your head around what a \"clock\" is (especially when its just assumed that the same clock goes to all appropriate components, as this game does) that could be a stumbling block.Finally, we get to the CPU components, and I feel this is where the game is the weakest. The way these last two levels feel compared to the others is completely different and I feel like there's a lot to be improved here. Upon opening the decoder spec (which you have to do, since the CPU uses the decoder), you're shown all these named output signals you've never seen before with almost no context and you're expected to understand what they do. By itself this would be infeasible, so the specification for the problem goes the complete opposite way and essentially gives away the answer for you. There's not really any puzzle to be had here, just reading directions and connecting wires while being confused, but not flexing your brain very much. The CPU level suffers from this problem but worse, as now all the design aspects are taken out of your hands and you just have to follow a checklist of \"connect the opcode output of the decoder to the opcode input of the ALU\", AND there are multiple layers to the design. Every level before this has had at most two \"advanced\"\/memory components between any input and any output. Here you have to go through the decoder, and the ALU, and these arithmetic\/memory registers, plus whatever other gates and muxes you have inbetween those, before you get to the other side of the component. If you forget to connect a component in the middle or you mix up two wires, your only debugging option is to connect wires to the final outputs and run simulation until you find the wires with bad values, which is absolutely not a debugging practice to encourage. Further, once you do complete the CPU, the game basically says \"well that's all the ideas we had\" and anti-climactically ends. There aren't even any credits that roll.Honestly this game seems like it was created less as an educational puzzle game and more as a compiler for logic gates written for unrelated purposes that somebody turned into a game. There are SO many little things that could be added or improved upon that would drastically improve the quality of this game.- Have more scoring criteria for the statistics section. Ripple-carry adders have the smallest number of gates of any common adder type but they're also incredibly slow. Carry look-ahead adders are faster but their number of gates grows rapidly with the number of input bits. Let people play around with designs more and optimize them in different ways.- Provide an ISA for the CPU. Give some context for why the decoder and ALU have the specifications they do.- Show that the CPU actually does things. Show that feeding in a certain sequence of instructions actually produces a desired result. Blink an LED. Literally anything beyond the one test case given.- Let users write their own programs for the CPU. Perhaps provide challenges to allow players to optimize their CPUs for particular programs.- Let users design their own CPU from the ground up, instead of using the specified ALU and decoder.- Give ANY sort of debugging tool. Even just listing what ports aren't connected would be helpful. Being able to view the values of internal wires during tests would be extremely helpful.- Edit the language of the game to allow custom names for wires and anonymous gates. Typing three assignments for every gate is just tedious. Having to pre-delcare and name every gate is frustrating.- Allow users to make custom modules.- Let users design their own puzzles. Let other users try to solve these puzzles.- Let the user enter more text than can fit on one screen. I tried to have one line per wire in the CPU and I just ran out of space. Every other text box in the game can scroll so why not this one?I really want this concept to work, but its just not at a point right now where I can recommend it. If you're at all interested in learning about hardware design, I'd recommend you wait for a price drop on this game before you buy it."],["This is actually a fantastic puzzle game that I easily sunk 6 hours in on my first session, but take my recommendation with a mound of salt, because this game is HARD. It gets EXTREMELY complex EXTREMELY fast. If you're not an engineer, you don't design circuits for a living, and\/or are not a programmer, then you probably won't get past the Full Adder. If you're a layman, you probably won't get past the first challenge, let alone the OR gate, which I admittedly had trouble with.Me, I'm a programmer (but I'm not educated in electrical engineering), and so far, I'm at the ALU challenge, where it wants you to implement a 4-bit CPU instruction set complete with op codes. Yes, you heard me right. You design a freaking CPU in this game. That's what the whole game leads up to. And I'm terrified.The game itself isn't that far off from a Zachtronics game. You're dropped in a curses-like IDE where you design hardware. Specifically, logic circuits. The design platform is an esoteric declarative strong static-typed programming language with a full specification in the in-game documentation with a formal syntax definition that strongly resembles that of the K&R C book (you'll know it when you see it). Luckily, declarative langauges are super easy to learn. It only took me 15-30 minutes to learn the syntax and caveats (granted, I already knew most of the syntax, since a lot of it's borrowed from other languages, like the dot operator used to access a property of a structure\/object in langs like C\/Python\/ECMAScript\/Java, or the C-like [] operator for declaring a bus, which is effectively an array of pins, or the semicolon for terminating statements). One important caveat is that buses are indexed from 1, not 0. So \"myBus[0] -> ...\" is not a thing.Another oddity is that the type comes after the identifier. instead of \"AND myAndGate\", it's \"myAndGate AND\". Also you can't use the beloved underscore character (_) in identifiers. Which means you either have to use C-like alllowercasenames(), or Java-like camelCaseNames(). Mildly annoying. I ended up using a hybrid of hungarian notation and libc (sa2 = selector AND gate #2) to name my parts.The text editor suffers from the same limitations as TIS-100's nodes. That is, you only get as much room as there is on the screen. That space is all you have to work with. So eventually, you'll have to start golfing your code just to make it fit. I personally don't agree with this. I think it's an annoying and arbitrary limitation. But I digress.The gameplay consists of building hardware using this IDE. You're given \"tasks\" (modules to design), and are able to re-use previously completed modules, to help ease complexity so you don't go insane. The game starts you out with a single completed module: the NAND gate. The single (and cheapest) gate from which all other logic gates are derived.Are you starting to see why implementing an OR gate is difficult yet?The first task is to create a NOT gate. Which immediately poses a brain twisting challenge for anyone who's never thought about this before. Luckily, I've already nerded out with NAND gates back in the short period of time I was playing with redstone in Minecraft, so all I had to do was remember what I did for the first couple logic gates, and XOR was a piece of cake...until I got to the full adder. Which I managed to half-implement before going nuts drawing chart after chart on paper of truth tables showing the values for A AND B, A OR B, A XOR B, and A NAND B, next to the carryIn values and the expected carryOut values, trying to see a pattern; all that just trying to figure out how to get the carryOut half of the adder implemented.So I did what any programmer on the job does when stuck: Google. I caved and Googled a schematic for a full adder. I was actually pretty close. The solution is one layer deeper than the chart I drew. And I don't consider it cheating, since it's still quite some work interpreting the circuit diagram and translating it to something like \"\/\/ ((A XOR B) AND ci) OR (A AND B)\", and then implementing it. Don't think of it as \"cheating\". Think of it as \"standing on the shoulders of giants\". You're already re-using work to make new work, and to refuse to look at other peoples' work (like real world implementations of such devices), would be tantamount to NIH syndrome.Did I mention this game is hard?10\/10 Would go insane again."],["BLANK","If you are looking for refreshing your knowledge on logic gates or if you are into programming\/electronic etc., MHRD is a material that teach you logic gates by a puzzle like game. I loved it and I think it is a must have.","Generally it is fun to me, but defintely not for everyone.And I reckon, electronic major stduent can use it to review the digital circuit knowledges.For the game, there are huge space to be improved.The game lagging all he time! Why you need to simulate the text based console with a game rendering engine? Why not just build a simple terminal\/command line game?The editor is awful to use, common, it is a developer game, editor is the most important experience! Same problem as TS-100. Line length limit, and limited line number per code! Why? Feels like I'm coding with GW-Basic in last centry!Debugging is hard, espeically for CPU part. I have to abuse the result bus as a JTAG to reveal some internal register for diagnosis.The game is too short!But in the end, I love the concept! And it is fun to me."],["I like the game so far. The one thing that is bothering me is that the truthtable of the tests is not in the same order as the truthtable within the design. Could you please fix that?","I have always been fascinated by the idea of genuinely fun games that actually teach you a thing or two. MHRD certainly fits this description; as you develop the components within the game you learn some key principles about computer logic whilst having to think creatively about how you solve each task.The new competitive edge added to the game in the form of a NAND-gate counter helps to spice things up, especially when you've beaten the game as it encourages you to try and enhance your initial component designs to make them more efficient.I for one can't recommend MHRD enough to those techy few who wish to understand just how exactly these mysterious devices known as CPUs work."],["At about 3.6 hours in, I'd say I'm liking it pretty well. It has a very minimalist design that reminds me of Xtree (the old DOS file explorer). There is no mouse input or graphical display of your current designs (besides the stock ASCII design that is provided as a guide to create the circuit). You create simple circuits and chain them together a series of in->out statements, which means there's a lot to keep straight in your head. The game would benefit greatly from hints and a way to see where you are in your progress throughout the game. Still for what it is, it's pretty fun","Overall the game was a fun short distraction (~5 hours).  The challenges progressed nicely, and were satisfying.  The interface was nothing very impressive compared to what they could have done.  My major problem with the game was the last level, which is the culmination of the previous levels was really weak.  There was almost no verification done on your solution meaning you didn't really have to do most of the challenge correctly to 'win', which was a huge dissapointment.Overall, a fun little game, but kind of pricey for the sophistication \/ length of the game."],["I have a headache please I just want it to stop.","A Good challenge, really gets you thinking and I actually learnt a few things playing it (like it hadn't occured to me you can turn an add function into a subtract just by inverting the input of a two's compliment number) plus the top scores vs your friends and globally is a really neat zachtronics esk feature.I like that it doesn't make you do every combination of bus components as a lot of those would just be tedious (thanks Ted!) though one or two do feel a chore.It's a shame the game doesn't take that one last step forward and have us wire the memory into the processor and any I\/O, as that might have been interesting. the test case for the processor is really lacking as well (only 10 cycles). If you had the inclination to do so, you could probably find a way to cheese it really hard and do no processing at all.positives:+ helps you learn a lot about logic, gets you thinking. especially when you look at the scoreboard and think \"how did they do that?\" I caved on one task and looked up the answer as I was sure they must've cheated... they didn't!!+ lots to learn about ways to use binary and turn small things into big things.+ it's got a nice retro feel to it.negatives-- the game has a serious problem with sound for some reason, which can breifly lock it up. Turn sound off and you'll never have this problem again.- fairly short, once get into it doesn't take that long - then again I might be baised as I'm fairly into engineering and processor architectureoverally I recommend it, as it's a bargain as a learning tool. but TURN OFF SOUND so it runs properly! your keyboard makes noises anyway!"],["I found MHRD to be a great game and a great way to take a peek into the advanced logic and circuitry that goes into building state-based computer hardware, especially CPU and RAM modules using registers. While the game ramps up in difficulty at around its midpoint, I found the difficulty curve to be enjoyable, especially when I first ran out of space while building the ALU and had to condense my design down for it to fit into the designer.I found myself having to use an external tool in the later stages to help prototype my designs before writing them into the game, which added an extra layer of fun to the game for me.All in all, if I had to choose a rating to give this game, I would give it a 10\/10.","Building a computer from the first principle is really very instructive. Although I knew nothing about electronics before, by following the specification, I could easily accomplish a task that I thought was impossible at the first place. It is an excellent game that I would highly recommend."],["A dream come true.Always wanted to learn how CPUs are designed but never had the time to do so.Thank you for making a dream come true!"],["It is quite a journey if not a very long one. It is very interesting to go from the simplest of components like NAND to a fullfletched CPU. I can seriously recommend this game to anyone from a relative newbie to programming as well as a more advanced one. It is quite some fun and definitely worth the money even though it has it's faults at times."],["It's not a bad game; I have a degree in EE so this was kind of a fun reminder of school... one big minus is one-indexing; I think this makes the game harder. I know there's a lot of subjectivity in programming, but one-indexing is objectively wrong. If the select bits are zero, they should select the zero input, and so on for a demux. Having the sel bits false map to input1\/output1 is just ugly.","Great idea, and thumbs up for it.  It's pretty amazing to build up a tiny CPU from basic gates.First off, the game is very short at the time of this writing.  I'm a software engineer by trade and my only experience with hardware design is a semester during my undergraduate studies.  Still, I finished this within 5 hours, without 'cheating' off Wikipedia.  No, I'm not saying iamverysmart, it's just that there's too little content.  Maybe the developers can add a scoreboard so I can see how bad I'm doing compared to others.  Or register files and pipeline designs.The interface is annoying.  Having to hit TAB between requirements and code at later levels is not ideal.  And there are random freezes when typing, not sure if it's for flavor or just a bug.  If it's flavor, it's not funny.Then there's the problem of the text editor being limited in size, wtf?  I found myself cramming multiple wires per line just because the editor won't scroll.  I understand this in TIS-100, where every node has limited program memory, but here it just seems arbitrary and annoying.Still, I'll gladly come back to this with every update.  I recommend it if the concept appeals to you, even though it's a pricy game that lasts only an afternoon as of now."],["fun little puzzle game involving Boolean logic and a simple hardware description language, in which you make elements with the end-goal of combining them into a small CPUit doesn't get terrifyingly difficult or frustrating, but the text-oriented nature might be a challenge in itself if you aren't used to itaesthetically it's IBM business-drab 80's: you can choose any color scheme as long as it's green, amber or grey-monochrome, given that the entirety of the story-line is \"work at a 80s chip company\" that's appropriate"],["Love it! It is logical and definitely easier than studying legit computer science, and I actually learn one thing or two in this manner.The only problem is that it got you thinking and it's not a type of game you can play straight for hours. It is necessary to take a break every now and then.","Build a CPU with NAND gates!The game was intertaining and educational! Worth the play through!I would have like some more detailed information on the ALU, its seem so brush over the subration elements.DFF block still a bit of a mistery to me, lol"],["I would recomend this game for anyone that wants to learn how a CPU is made or any student in electronics. The gameplay is simple but allows you to learn a lot about electronics and how to logic elements are build and CPUs and RAMs are made as well as a lot other elements. You start off with a simple NAND gate and slowly only by using NAND gates you crate more elements which you use to create more and more. However you would need to have some knowledge in boolean algebra if you want to enjoy the game or learn something from it.Can't wait for a squel"],["Thank you for making me start \"NAND to Tetris\" course, guys! The game idea is good, but the execution is moderate. Being a linuxoid, I enjoyed visuals and sound (still wanted to tweak colors myself, though), but I just can't believe the game like this really needs that 600 MiB of RAM and can be so heavy to cause lags and freezes. Also, I would like to have more control over the sound, e. g. the ability to turn down all the sfx except the keys, so I can turn on my media player and play with extra comfort."],["Very fun logical\/geek game :D"],["A neat game for introducing yourself to logic. Really helps to have a paper and pencil on hand, to draw things out and try things in your head.","This.. is not a game. There's rare chance that you will find game-like property on this game.Even cmu's bomb lab is more enjoyable than this, though it's about different course.It's like homework assignment of basic logical circuit cource that is poorely explained on the subject.You can get same experience by grabbing any logical circuit description language and simulator.If it were about 3 dollar, I would be appreciated. 10 box? no way."],["Nice soundtrack. I like very minimal techno.","Nice game!"],["Good puzzle game. It's pretty easy for someone who's already familiar with computer architecture, but I didn't find it to be a waste of time.PRO:+ Simple gameplay around builting basic computer circuits+ Has actual educational \/ real-life valueCON:- There isn't anything available other the main \"story\" mode and has little replay value, beyond small personal things like optimizing for the number of NAND gates used in a solution and cleaning up your designs- Despite having an educational nature, puts a hard line limit on solutions; for most of the game, I think this is OK, but towards the end it forces you to adjust your formatting to be very compact, and if you aren't careful, solutions become difficult readBOTH\/EITHER:? Purely textual gameplay and doesn't focus on being prettyOther issues:- The game doesn't start correctly into borderless windowed mode (window splits across monitors); recommend playing in windowed- Doesn't credit the original source for the content (see https:\/\/www.nand2tetris.org)Basically, if you get this game, you're signing up to spend 4-10 hours building a few logic gates and pieces leading up to a very basic CPU, using a textual format.This game appeals to me because it feels similar to doing homework, reading textbooks and playing puzzle games (especially other programming-type games like TIS-100, Spacechem, etc), and if you're turned off by any of those things this game may not be your cup of tea.8\/10","Great game, the perfect introduction to constructing every logic gate into a CPU although it would be helpful if an ASCII circuit visualiser is available. Overall, on its own it is an amazing game."],["Well, it only lasted me for three hours, but those three hours were fun.This feels like a true \"nand2tetris\" version - except there is no hardware involved, and it stops short of achieving Tetris. Then again the last message it gives is \"to be continued\", so maybe we'll get there one day.You start out with a NAND, and from that start designing first other logic primitives and then use those in turn as the foundation for ever more complicated circuits towards a simplistic CPU.The challenges aren't too hard, however in lack of a debugging feature I found it easier on occasion to start from scratch rather than fixing the existing code. It would be nice to be able to step through the test cases, or at least to check the internal input and output lines before and after failed test cases.Also despite mostly just being a big text editor, text input lagged every now and then."],["Good game so far, but two things really need to be changed. TAB needs to act as auto-complete, and CTRL+Enter as auto-accept suggestion. These hotkeys are so engrained if you actually program, I can't even play the game for a few minutes without screwing up, and the game glitching out. Please change these, or at least allow in the ingame menu to rebind.(edit) I've also found the game stalls every few mintues, and it's pretty frustrating. Still a great game, but it needs some tender love and care I think."],["Today's subject at electronics class was spoilers.Joke aside, this thing is harder than Java"],["Basically a textbook but a little better. Worth it if you want to take the final step from Zachtronics to Silicon Zeroes to real ."],["You can create a lot of nice things!"],["Takes alot of reading and i spent the first 40 minutes trying to figure out why it wouldnt parse. Turns out i had a stray semicolon. 10\/10 would spend 40 minutes rewriting everything again."],["Zachlike about designing a CPU. Pretty short and easy compared to other games in the genre - finishes as soon as you complete your first CPU instead of continuing to implement more complex CPU features. Uses a pseudo hardware design language similar to ones used irl.","I don't know if it's a game, but I've love every hour spent on it. I've learn lots of stuff and I even want to use what I've learn with my students.I'm not sure there can be a DLC or a sequel, but I hope to see something like it one day.A workshop where we could design our own computer parts would be awesome. Or even a way to actually program this computer to solve other problems, like in Zacktronics games, would be even more awesome."],["The game is very short (it took me about 3.5 hours, but it would probably take someone less experienced longer).It's a very neat idea, though the execution is somewhat lacking (no mouse input, no debugging, very basic text editor). The difficulty curve is very slow at the start and then towards the end *extremely* steep. The ending hints that more levels are coming, but considering that the last update for this game was more than two and a half years ago I don't believe that's happening.So that leaves you with ~20 levels, some of which are extremely similar and very easy to cheat through since there's very few test cases (the CPU at the end only has 10!)There also isn't much of a story or any other real draw. It's not a bad game, but a few months of development shy of a good one.I did have a bit of fun in the later levels, but I'd recommend almost any Zachtronics game over this (EXAPUNKS is my personal favourite).  Just play those instead."],["Just completed this game and I have to say it has been an interesting ride throughout.It takes the complex task of creating a CPU and breaks it down into manageable steps. Each part I could understand individually and with the instructions, and while using the parts I myself have created, I was able to build a virtual CPU.This has been a great addition to my path through electronics and computing, and while it might not be the most realistic in the world, it really gives off the VHDL\/Verilog etc. vibe and makes you delve into the deep world of logic that is only that one small step above raw electron flow.Amazing niche game!"],["I feel like you just tricked me into doing your homework"],["The game is fun but short. I see it as a good addition for intro to digital electronics\/logic circuits course for students. Completing tasks isn't really hard when you aren't trying to use as least NANDs as possible.","I am really enjoying this game (maybe a game is the wrong word), as someone who always wanted to know about how the ones and zero (on\/off) states were used to make up the logic and function of a computer.This was a fun way to start my learning.It has inspired me to start at journey into understand Boolean Logic as a result I have spent more time understanding the logic, then writing the solution in the game.  Instead of pen and paper I have used excel to generate the truth tables of the individual components and combine them to test if my design is correct. In doing some I am working out how to wire the components together.I enjoy the simple interface (I grew up using DOS and programming in BASIC), I know it is simple as the many people have stated but sometime simple is what people need to encourage them to start the journey."],["A neat little puzzler for an afternoon. Would recommend if you find it conceptually intriguing.","If you already know a little bit of digital logic or want to learn digital logic, this is a truly excellent game to practice those skills. Starting with NAND gates, you eventually get to build a simple CPU and memory from the ground up. I found this game even more enjoyable by applying what I'm doing directly into another digital logic simulator, effectively allowing me to study, program and modify the CPU. One of the best and most enjoyable learning experiences I've ever had with a game."],["A really cool game, but missing explanations\/gameplay around CPU architecturing.When you start getting in the ALU \/ DECODER \/ CPU tasks, the game gives you no explanations on how the specs of the components have been designed. (Like, why we are using this set of operations on the ALU). You're just tasked with implementing them, without needing to understanding them.Another game (it would have been even better if done before this one) with some programming of the CPU would have been quite nice, to really understand the \"real life\" uses of the registers, ALU operations, etc..."],["The depth and real world applicability of this game is simply brilliant. It's not an easy game, I would certainly keep a sketchpad ready -- but it's certainly doable for anyone who understands the absolute basics of logic.My only complaint is that you can't view both the specification and your workspace at the same time, so I keep ending up making a screenshot of the specs, to keep them side-by-side.I also wish there were optimization goals for replayability: Most of these types of games offer personal & global top scores for things like \"parts used\". For example, a half-adder can be built with 5 NANDs, and a full-adder is easily made from two half-adders with an OR -- but could be made cheaper with 9 NANDs with some extra puzzling."],["This brings me back to COSC 365 (Digital Logic) in college - but in a good way. If you have an interest in boolean logic, truth tables, karnaugh maps, logical circuitry and the fundamentals of computing then this game is really great. It has an awesome old-school feel complete with clackity keyboards and harddrive sounds, whirring fans, and a selection of old-school color schemes. I dust this game off and play it now and again in an attempt to keep my circuit skills sharp. Bring pen and paper!"],["Nice game to remember such tech subjects: computer logic, discrete math"],["This is a game where you build progressively more complicated circuits, which culminates into building a functional cpu. If this sounds more like a job then it does like fun then this game probably isn't for you. If you're interested in how computers work, then this is a great educational piece of software that does exactly what is advertised with no fluff."],[" ,          FPGA  .., ..      NAND. 100\/100","I really like this game!I had no problems understanding the \"program language\" or designing the parts.(But: I study computer science in the 5th semester, so it could be harder for others)I don't know if the developer reads these reviews, but I also have a short feedback:1. it would be nice if parts were easier to define.(not: n1 NOT, n2 NOT, n3 ... but for example n1 n2 n3 NOT, )2. the editor for the drafts has a fixed number of lines so the page does not grow with the length of the code!This is really annoying if you want to define only one cable per line! 3. key mapping (for TAB and RETURN) not very intuitive, but ok and I don't know how to do it better."],["smooth and relaxing, like you are at work, but your at home? no pressure just you and the grad school refresher.","It's.. okay. But that's about it.Pros:- interesting interface and sounds- doesn't do away with technical wording- quite difficult if you don't know your way around logic gates much- something that resembles a story(?)- LeaderboardsCons:- no volume slider- random freezes- RTFM is not possible without the M - ingame docs are not helpful- wiring logic gates up in code form is a horrible experience"],["If you went through Project Lead the Way in high school, and did the digital circuits course, and remember that stuff, that's basically what this game is. It's basically a digital breadboard, and you're routing the wires to make the circuit. And every circuit you complete get packaged into a new DIP you can use. And there's an intern who extrapolates your work and gives you new DIPs (like taking a NAND and making a 4NAND).So break out those truth tables and Karnaugh maps and get cracking!","You build a virtual CPU from the ground up using logic gates. If that sentence excites you, you'll probably enjoy this game. Otherwise, you probably won't. There's not much of a visual experience since most of the interface is coding, but if you're interested in logic gate puzzles then you'll like this game."],["This game is basically a semester of Digital Electronics in my college."],["Really great text based game, after completing the first few levels i'm hooked. It could use a sound track though."],["You can consider this game as a guided test-based introduction to hardware description languages and logic circuit design.Pretty good, but the lack of blackboxing can be annoying sometimes."],["Fun game if you're willing to put in some thought! For reference I'm a programmer - I haven't looked at any kind of hardware designs like this before but I did go in with a basic understanding of what RAM is, how AND\/OR\/NOT work, etc. Very interesting to have that gap in my knowledge more or less filled.I think there are some good decisions made in the name of understandability and gameplay, eg the solutions have a maximum length of one page, which means nothing you build will turn into a horrible lump of spaghetti code. Also the auto-completion is a great feature to prevent you having to look back and forth at previous designs all the time.Only downsides are:- Slight problem with freezing\/jumping; on my PC the game sometimes stops and then snaps back into life a couple of seconds later. Frankly it is impressive to have performance problems on a game that could have been made in the 1980s, but there you go.- Editing and navigating can get awkward when you're just using the arrow keys (doesn't even have a mouse input). Again it's not too bad because all the solutions are short, but could have been better (if there was an option to turn on vi keybindings I would have been ecstatic!)"],["I found the whole idea of building an entire CPU from the ground up fascinating and educating. Being able to trace the emergence of more and more complicated functional elements from simpler ones does a terrific job of organizing knowledge in a hierarchichal manner. If you're serious about grasping the inner workings of a CPU, this is probably a good starting point before reaching for a handbook treatment of the topic (think: intuition precedes formal definitions). Below is my list of pros and cons.Pros:- very simple and intuitive HDL- problems are presented (roughly) in order of increasing complexity- the development environment is simple yet fairly powerful- the atmosphere of solving actual problems can be felt throughout the game- the game has a nice retro look and feelCons:- perhaps the ability to define custom functional elements would be nice (i.e. outside the scope of tasks)","Good logic puzzle game."],["Excellent test of digital logic skills. I wouldn't recommend this game to someone without solid digital logic experience and critical thinking skills. It requires a high level of abstract thinking, and is sure to make your brain hurt at points. The process of building up from nothing is immensely satisfying, but visual style of the game forces you to do much of the problem solving on paper. There isn't a debugging option, so it is easy to get stuck on a level and have no idea where things went wrong. Overall, the game is unique in how much it expects of the player, and is an excellent supplement to someone wanting to use their pre-existing knowledge of digital logic to do something amazing."],["EDIT: After further tries, it seems like the game only works with the Oracle JRE. openJDK doesn't work even though it's bundled along with the game. The developer should have mentioned this themselves on the store page instead of having people spend time troubleshooting problems with their games.Previous Review:The game doesn't work. I tried all sorts of troubleshooting actions short of actually decompiling the java application and fixing it myself to reaching out to the developer for help but couldn't get it to work. The game seems abandoned. Verdict: Not recommended.","I hate to do this. $10 seems like about the right price, and it will definitely teach you things if you're new to hardware design (and have some patience). There's a few places it's put in some genuine effort to make it feel 80's-ish. I had some audio bugs on Linux, but whatever, there's hardly any audio anyway. It's not bad.Unfortunately, just about everything I like about this game has been done better elsewhere, and cheaper. Here are things I'd recommend instead:Dropping the 80's aesthetic entirely, Nandgame is a free web game that focuses on pointing and clicking to assemble circuits like a flowchart. It covers basically the same material, only visually instead of with an HDL.For more depth, Nand2Tetris will require you to buy a copy of the book, eventually (there's a $35 paperback), but the website has free PDFs for the first six chapters, which includes all the same material that MHRD does. It's not trying to be a game at all, but that means you get to use modern text editors and even your favorite scripting language to generate some of that code, so there's none of that copy\/pasting. And if you do get the textbook, you get to actually write code to run on the CPU you build!I guess the combination of real hardware design and 80's UI is unique? But I don't think it's a combination that works especially well together, and you can see this by looking at TIS-100 -- aside from just slightly-better aesthetics, it has all-around better ergonomics and tooling, tougher puzzles, way less copy\/pasting, and even a better plot, and I think all of those things are only possible because it uses fictional hardware with a fictional assembly language. Like SHENZHEN I\/O and EXAPUNKS, this means every aspect of the coding and puzzles can be adjusted to fit the constraints of the UI and just whatever makes a good puzzle. Without that, MHRD is just trying to find good puzzles in real-world design, while wrapping it in a deliberately-awkward UI."],["The game is not difficult nor easy - It's targeted at those who are new into digital design. I haven't finished it yet but I enjoy it. The only downside is that you can't write your own modules."],["I love what the developer was trying to do here, but I cant really recommend this game.There isn't a lot of room for creativity. Would be better if you could make your own components.  Game is over just when it starts getting interesting."],["Now this is a hard decision but would I recommend it to a friend? No, I guess I wouldn't. There really should me an option to vote \"meh\".Note that I was intrigued by the idea to play around with a hardware definition language in a game like scenario and even though the language is very (!) basic (just assignments -> very far away from even the most basic stuff covered on the first page of any VHDL introduction) and the whole approach is very limited, I basically got what I expected. So, don't get me wrong: I appreciate the idea, I am OK with the money I spent and I would encourage the author or others to come up with something that develops this idea into a game or training tool which is less of a hassle and allows you to venture deeper into hardware design with a HDL.However, in addition to the very limited scope, there are quite massive technical and GUI flaws. First of all, the 80s style GUI and setting doesn't make much sense for a HDL and it makes everything a bit of a drag. Worst of all, the editor is buggy, lacks basic features, tends to slow down to a crawl and actually stops responding all the time which is somewhat ridiculous for a very basic plain text editor running on a multi-GHz quadcore CPU. This hints to terrible internal design (e.g. RegEx parser stuck in garbage collection).Also copy&paste sometimes just inserts garbage, copy&paste from\/to other applications is not possible for whatever reason and there is no cut\/paste (i.e. while you can delete text with delete, you can't paste it anymore). Furthermore, the number of lines is limited, so you need to drop comments and\/or put multiple assignments in a line to save space. This is just bizarre and would have been a no-go even back in the 80s.Last but not least the auto-complete window overlaps the text which can become an issue for designs which use more than a few lines.All in all, the editor is about the worst I have used in my life. And I started on the C64 and used EDLIN in DOS. Given the totally inadequate design and implementation, a plain vanilla (Java) editor component would have been a _much_ better approach than this mess.Regarding the actual \"tasks\", there is no hint system (beyond the task description) or good\/ideal solutions shown after you finished the task. It might have been a good idea to have at least one example per chapter, but there are only two very basic examples at the very start and from there on, you are on your own.It was also a bit of a disappointment to notice that this is not even a real HDL simulator despite the very simplified approach. I.e. there are only a couple of given tasks and you can't design anything else beyond that. For each task, there is a truth table against which your design is compared. One line of the table is either \"passed\" or \"failed\" - not even the wrong values are marked. There are no clocks, no waveforms, no ways to investigate internal states. The global high score system was either hacked or is broken (CPU design with 18 blocks) and the achievement system seems to be buggy as well. E.g. I didn't get the ALU achievement even though I finished all chapters and the final CPU achievement which needs the ALU to be finished. So no perfect game for me because of bugs.Pressing Alt+Return causes a semi-crash in full screen mode (desktop is entered, program still running, but impossible to get the screen back).I needed around 7h including reworking some designs to reduce the gate count. But to be honest, most of this time felt like work or even worse due to the terrible editor and all the bugs.It's also worth noting that only 12.6% of players made it to the end (\"Look at me, I built a CPU!\"). Given that only people interested in HDL and Boolean logic would even buy this, that there are actually only a few tasks and that the complexity of the designs is very limited due to the limited line numbers alone, this is somewhat telling."],["Best Courese","Overall a fun programming game.Pros:- The puzzle topics feel more realistic in nature than many other programming games, which tend to provide you an instruction set and some novel restriction on your programming environment in which you solve puzzles. In MHRD you're implementing a very basic CPU from the ground up using logic gates and registers. The explanation of twos complement was nice, I had forgotten how it works and the explanation in this game taught me something about it.  - Documentation for the in game language is available in game and is not terribly complicated, so you don't have to keep alt-tabbing to a specification PDF. Cons:- Game feels a little short. You get to the final puzzle, constructing the CPU, pretty quickly. - This game is not as polished as some of the more popular programming games on Steam, like those from Zachtronics. There is no step-by-step execution for debugging your solutions, and the final puzzles where you construct the CPU and CPU opcode decoder have some ambiguities in their descriptions. The final CPU puzzle doesn't have many test cases which let me feeling a bit unsatisfied when I finished it, and wondering if I mistakingly missed some cases. I believe there is a spec in the description that you can completely ignore in the test cases, related to properly propagating sign of a 5 bit input when you pad it out to 16 bits in twos complement form. - More lack of polish: If your solution starts to reach the bottom of the input window, the input and the autocomplete display will overlap and make it hard to read either. - I came dangerously close to resetting my progress while trying to navigate into the settings to change my sound. Not sure if this says more about me or more about the settings UI. Despite my criticisms I enjoyed it and would recommend it to others.","Great pencil-and-paper \"game.\" It is unkind to laymen, but it is a ton of fun seeing real-life, technically-in-depth concepts being presented as a form of entertainment.Calling this a 'CPU designing simulator' rather than 'game' seems more appropriate.A game might have some quality-of-life features, like an in-game scratch-pad or mouse-menu, and will abstract-out a lot of real-world details. MHRD does not provide such fluff because it hates you.Instead, MHRD prefers to keep it simple while also keeping it real. It simulates a scenario where you are at work, hacking away hardware descriptions on an 80's computer terminal. The difference between this game and real-life, is that you get to do the fun solving of logic puzzles at your own pace. Real-life has pressures like deadlines, red-tape, and real people whereas this game has Ted.Ted is a bro.Some prerequisite knowledge will give you a head-start:- Handling Boolean logic (this is the core game-play)- CPU gates (what they are)- Hardware Description Language experience (e.g, Verilog)Other knowledge will make the increasingly daunting tasks less intimidating:- Knowledge of general CPU terms or jargon- Knowledge of base 2, 10, and 16 number systems (binary, decimal, hex)- Understanding of Truth-Tables (or input-output tables)- Understanding of CPU clocks\/timingThese are just a handful of knowledge points that can transfer from real-life into getting a head-start in this game. Missing knowledge may add challenges for \"blind\" players, but as long as the player has strong reading comprehension skills, perseverance, internet access, and a lot of scratch-paper, they should be able to overcome all of these knowledge gaps. As with everything in the computer science industry, if you stare at something long enough, it will eventually make sense.","Without proper access to digital components, I found this game an absolute blast to go through. Would've been even more fun if it was longer!"],["In this game you build a CPU from zero. For real."],["Really enjoyed the game, However I think especially in the decoder and the CPU tasks, instructions could be a little bit more clear. Especially on the CPU it took me some time to understand where to properly apply the sign repairs on the constant and where not."],["Great game if you like understanding the inner workings of digital components and linking them together to build something greater"],["Mouse is not available. Auto-completion shortcut has conflict with system-wide shortcut thus not useable on macOS.","The game is entertaining at first, but you get left on your own very, very early. A lot of puzzle games tend to baby the players too much, so I'm not advocating for that. Some hints or tips to help users get started on advanced circuits might be nice. Several times I've had to reference a walk-through for the answer. After running some numbers through the answer, I can see that it works, but that doesn't help me learn. I'm just as unprepared for the next complicated circuit because I don't understand how to think through the problem. This really kills it for me."],["Short to finish but fun. Especially the later problems. End game stuff is optimizing gates. TBH I had much more fun with Prime Mover but that's also much more of a time sink."],["Amazing game","I love this game and its idea, but...Pros: * unique idea * it's funCons: * random freezes of editor (firstly I think it's on purpose... :D) * code is limited to one page (without any warning)Final verdict:MHRD should have better UI\/UX\/design. Game itself it's worth 2-3 EUR\/USD, you can find free alternatives\/materials- purchasing you only get stream \"achievements\" and \"trading cards\"."],["It's alright, but the briefs for later levels get super confusing. However, you can basically play this whole game for free and also learn more by checking out the \"NAND to tetris\" project online. It covers the same stuff as this game and more.","Sharp learning curve, but pretty fulfilling."],["As stated by other reviewers, MHRD is an extended tutorial on how to develop logic circuits from first principles, sharing common ancestry with other courses and games on the subject. This review doesn't focus on those aspects (for those, see instead, eg, markus' review), but focuses instead on the new things it brings to the table.Where MHRD shines is by providing a simple and well-presented visual language for circuit design, eschewing the cumbersome nature of assembly programming. Instead of drilling concepts repeatedly after they're learned and expecting the player to manually copy designs from previous problems, successful designs are available by keyword immediately and ancestors derived from them automatically, presenting themselves in elegant fashion in the left column. This lets the player focus on new solutions and feels quite satisfying, as derived designs cascade in and become immediately accessible. This also allows the game to be respectful to players with limited time, taking only a few hours to complete once you understand the core concepts.It's easy to imagine this as a companion to course material to a logic circuits course, or a full course on ALU and CPU design and operating system fundamentals. Having an easily installed and accessible game available through Steam that is well-presented and satisfying to work through is quite handy, and serves as a good demonstration of effective UI and tutorial design along the way.That said, I agree with others that MHRD doesn't really push the boundaries of the player's knowledge. If you'd like interesting challenges based on these core concepts, TIS-100 and Shenzhen I\/O are easy recommendations. If you're still comfortable running Flash, Manufactoria (by PleasingFungus Games) is also an easy recommendation, as it teaches the sister concepts of building these same circuits with Turing logic instead. And if you're interested in learning more about CPU architecture or design, either independently or as part of a course, other reviews here are full of good recommendations."],["It is relatively is for me to work the problems out . But more importantly,if you read the specification carefully and consider the reason why we should build those components,you will understand the nature of a simple processor,even if you haven't learnt relevant courses yet."],["nice game,had a hard time at  ALU part, the description differs to the ALU you gonna have to build:The description says you have to output 0000 when an adding overflow occurs, but in testing the expected output doesnt care for that. So i just put out the contents of the adder wether or not its overflowing, and it worked"],["Exciting and challenging logic game, though pretty short.Some top scores require hacking the tests - probably impossible following fair specifications of elements, on the other hand it's also quite interesting."],["Small learning curve to figure out how to actually play the game, but after that it was an absolute joy","Literally like being at work","Good learning ramp. Gets to the interesting gates quickly enough (why do I think the FULLADDER is so awesome?) Fun even if you know logic gates a bit.","Fun \"game\""],["Amazing"],["pretty cool, followed my digital logic class pretty well"],["Short and sweet, great overview of how basic circuits work."],["Great game for understanding binary logic. Would recommend to every programmer. It gives you an insight into how your code actually works on the computer."],["It's fun if you enjoy programming and logic games.  Think: the baby Quartus love child of Albert Malvino and Ben Eater."],["A great game for  learning computer architecture."],["Just bought this game today and I love it! This is NOT a game about programming computers, its a game about designing your own computer hardware in a fictitious in-game hardware description language. You're not going to find any fancy graphics here and you're going to have to do your own research outside of the game to be able to create the various circuits needed to build your CPU in the game. MHRD does a good job at being what it is though. I see many comments mentioning the \"Nand 2 Tetris\" course and the companion book \"Elements of Computing Systems\". This game is a good supplement or precursor to that course and book."],["How did this game come out in 2017 and I not find it till now? For those who like technical games like TIS-100 and Shenzen I\/O this will be a great addition to your library."],["Not a lot to the game compared to a zachtronics game, but the puzzles have been more enjoyable that I was expecting and reusing the parts from the previous assignments very satisfying (though thankfully the larger bus designs are unlocked automatically).The game itself has a very minimal interface and it even recommends you draw out the designs on paper. The help in game is okay but I found myself referring online to remind myself what the symbols for boolean logic operators were and the different shape of logic gates. It helped me through the first half of the game having done boolean logic in the distant past but a motivated learner could probably get themselves through that half.The final level could do with having more tests as it looks like the highscores table have gamed the tests and not actually made a CPU!"],["Warning, minor game spoilers within.The core mechanic for this game is designing your own suite of parts and using those to build other parts. I really like that mechanic, and the game was quite fun. Some things to improve though:- It'd be really nice to see how many NAND gates a current design takes, and how that scales out to the auto-generated designs Ted makes. People like me like games like this because it is not a puzzle game. It is a design game. The core difference is that with design games, it is possible to optimize the solution. The only metric given as to how \"optimal\" our design is, is currently number of NAND gates.- While playing the game, there were several times where the keyboard\/window froze and it took several seconds for a keypress to reflect on screen. I'm not sure if that is a optimization bug or an i\/o bug, but that greatly takes away from the experience and reminds me that this game probably has a garbage collector (or it may not be the garbage collector and this is just a reflexive accusation)- The OR4W design I tried to make with 2 OR gates and connecting both outputs to the output of the gate. I can see why this isn't allowed, but I think this would work irl.- The CPU as the capstone makes sense, but I would like to see more projects like a GPU, network card, branch predictor, caches, until we have a working computer built.- there is not a whole lot of inspect-ability into what is actually going on with the tests. It'd be nice to have a debug mode where you can see what the values of various wires in the circuit are and what the outputs are supposed to be for a specific test. This is made up for partially by good error messages.- the negative value for the ALU is useless. It also took me 5 minutes to figure out you just want it wired to the high bit of the ALU output. That could be better explained.- It would also be cool to be able to design our own parts, with their own tests and specs. This expansion to functionality would greatly expand the game and resolve a couple of other bullet points on it's own- Is there a place to get\/make mods for this game?Good game, not super long, well done!"],["Really nice simulator","Sorry guys - no time for a detailed review atm, need to take that call from Intel. 10\/10","If you're into electrical and computer engineering, this game is a lot of fun.  I wish there were a little more to do after you finish the CPU, I wish the developer implemented a more robust automated test set, and I also kind of wish they would let you implement the D flip-flop and provide a clock signal instead of just giving it to you.On the first wish: once you're done the CPU, you're pretty much done.  No experimenting, no developing your own assembly, no sandbox or anything like that.  It's just trying to optimize to get better scores in the Statistics tab, which leads to...Second wish: because of how the tests are completed (or so I would guess), there are ways to game certain aspects of the solutions.  A perfect example is the REGISTER4B which theoretically requires at least 4 DFFs (one per bit).  Based on player statistics provided by the developer, the ideal realistic solution seems to use 33 NAND gates; however, it would appear that a few people have found a way to trick the tests into passing with as few as 17 NANDs.  Likewise, similar issues come up with other memory circuits.","Do you recommend this game? I mean, kinda?It's a cool little game with a semblance of a story line.  Apparently, it is ripped from nand2tetris, with nand2tetris being much better.  Overall, not enough direction.  Play it if you either know this stuff already and won't benefit from it, or are willing to use guides and therefore won't learn from it.  It's a neat one to add to the collection, that's about it.Also the error messages are not particularly helpful."],["A fun game that takes you from building basic logic gates out of NANDs to building a CPU. My only real complaint is that it's rather short; I got through all the challenges in about 4 hours. Not a lot of replay value either, other than maybe going back and trying to optimize some of your solutions to use fewer gates.Still, I feel like it was worth it. A short but ultimately enjoyable experience."],["It was a neat, small experience that I enjoyed.  I wished there was more levels but I guess that goes to show how good the game was","Literally doesn't work on my computer. I've spent over an hour trying to troubleshoot, but it consistently freezes very shortly after startup and locks up my computer. Sometimes task manager can fix it, sometimes I just have to restart. There's no reason a game of this sort should be so hard to get running."],["great to get your brain working"]]}